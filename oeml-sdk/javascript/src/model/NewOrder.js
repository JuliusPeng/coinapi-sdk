/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeInForce from './TimeInForce';

/**
 * The NewOrder model module.
 * @module model/NewOrder
 * @version v1
 */
class NewOrder {
    /**
     * Constructs a new <code>NewOrder</code>.
     * @alias module:model/NewOrder
     */
    constructor() { 
        
        NewOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewOrder} obj Optional instance to populate.
     * @return {module:model/NewOrder} The populated <code>NewOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewOrder();

            if (data.hasOwnProperty('exchange_id')) {
                obj['exchange_id'] = ApiClient.convertToType(data['exchange_id'], 'String');
            }
            if (data.hasOwnProperty('client_order_id')) {
                obj['client_order_id'] = ApiClient.convertToType(data['client_order_id'], 'String');
            }
            if (data.hasOwnProperty('symbol_exchange')) {
                obj['symbol_exchange'] = ApiClient.convertToType(data['symbol_exchange'], 'String');
            }
            if (data.hasOwnProperty('symbol_coinapi')) {
                obj['symbol_coinapi'] = ApiClient.convertToType(data['symbol_coinapi'], 'String');
            }
            if (data.hasOwnProperty('amount_order')) {
                obj['amount_order'] = ApiClient.convertToType(data['amount_order'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'String');
            }
            if (data.hasOwnProperty('order_type')) {
                obj['order_type'] = ApiClient.convertToType(data['order_type'], 'String');
            }
            if (data.hasOwnProperty('time_in_force')) {
                obj['time_in_force'] = TimeInForce.constructFromObject(data['time_in_force']);
            }
            if (data.hasOwnProperty('expire_time')) {
                obj['expire_time'] = ApiClient.convertToType(data['expire_time'], 'Date');
            }
            if (data.hasOwnProperty('exec_inst')) {
                obj['exec_inst'] = ApiClient.convertToType(data['exec_inst'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Exchange name
 * @member {String} exchange_id
 */
NewOrder.prototype['exchange_id'] = undefined;

/**
 * Client unique identifier for the trade.
 * @member {String} client_order_id
 */
NewOrder.prototype['client_order_id'] = undefined;

/**
 * The symbol of the order.
 * @member {String} symbol_exchange
 */
NewOrder.prototype['symbol_exchange'] = undefined;

/**
 * The CoinAPI symbol of the order.
 * @member {String} symbol_coinapi
 */
NewOrder.prototype['symbol_coinapi'] = undefined;

/**
 * Quoted decimal amount to purchase.
 * @member {Number} amount_order
 */
NewOrder.prototype['amount_order'] = undefined;

/**
 * Quoted decimal amount to spend per unit.
 * @member {Number} price
 */
NewOrder.prototype['price'] = undefined;

/**
 * Buy or Sell
 * @member {module:model/NewOrder.SideEnum} side
 */
NewOrder.prototype['side'] = undefined;

/**
 * The order type.
 * @member {module:model/NewOrder.OrderTypeEnum} order_type
 */
NewOrder.prototype['order_type'] = undefined;

/**
 * @member {module:model/TimeInForce} time_in_force
 */
NewOrder.prototype['time_in_force'] = undefined;

/**
 * Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE, GOOD_TILL_TIME_OMS
 * @member {Date} expire_time
 */
NewOrder.prototype['expire_time'] = undefined;

/**
 * Order execution instructions are documented in the separate section: <a href=\"#oeml-order-params-exec\">OEML / Starter Guide / Order parameters / Execution instructions</a> 
 * @member {Array.<module:model/NewOrder.ExecInstEnum>} exec_inst
 */
NewOrder.prototype['exec_inst'] = undefined;





/**
 * Allowed values for the <code>side</code> property.
 * @enum {String}
 * @readonly
 */
NewOrder['SideEnum'] = {

    /**
     * value: "BUY"
     * @const
     */
    "BUY": "BUY",

    /**
     * value: "SELL"
     * @const
     */
    "SELL": "SELL"
};


/**
 * Allowed values for the <code>order_type</code> property.
 * @enum {String}
 * @readonly
 */
NewOrder['OrderTypeEnum'] = {

    /**
     * value: "LIMIT"
     * @const
     */
    "LIMIT": "LIMIT"
};


/**
 * Allowed values for the <code>execInst</code> property.
 * @enum {String}
 * @readonly
 */
NewOrder['ExecInstEnum'] = {

    /**
     * value: "MAKER_OR_CANCEL"
     * @const
     */
    "MAKER_OR_CANCEL": "MAKER_OR_CANCEL"
};



export default NewOrder;

