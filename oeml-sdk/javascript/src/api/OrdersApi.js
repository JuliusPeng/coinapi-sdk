/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrderValidationError from '../model/CreateOrderValidationError';
import ExecutionReport from '../model/ExecutionReport';
import Message from '../model/Message';
import NewOrder from '../model/NewOrder';
import OrderCancelAllRequest from '../model/OrderCancelAllRequest';
import OrderCancelSingleRequest from '../model/OrderCancelSingleRequest';

/**
* Orders service.
* @module api/OrdersApi
* @version v1
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1OrdersCancelAllPost operation.
     * @callback module:api/OrdersApi~v1OrdersCancelAllPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all orders
     * This request cancels all open orders across all or single specified exchange.
     * @param {module:model/OrderCancelAllRequest} orderCancelAllRequest 
     * @param {module:api/OrdersApi~v1OrdersCancelAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    v1OrdersCancelAllPost(orderCancelAllRequest, callback) {
      let postBody = orderCancelAllRequest;
      // verify the required parameter 'orderCancelAllRequest' is set
      if (orderCancelAllRequest === undefined || orderCancelAllRequest === null) {
        throw new Error("Missing the required parameter 'orderCancelAllRequest' when calling v1OrdersCancelAllPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/v1/orders/cancel/all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OrdersCancelPost operation.
     * @callback module:api/OrdersApi~v1OrdersCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order
     * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
     * @param {module:model/OrderCancelSingleRequest} orderCancelSingleRequest 
     * @param {module:api/OrdersApi~v1OrdersCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionReport}
     */
    v1OrdersCancelPost(orderCancelSingleRequest, callback) {
      let postBody = orderCancelSingleRequest;
      // verify the required parameter 'orderCancelSingleRequest' is set
      if (orderCancelSingleRequest === undefined || orderCancelSingleRequest === null) {
        throw new Error("Missing the required parameter 'orderCancelSingleRequest' when calling v1OrdersCancelPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'appliction/json'];
      let returnType = ExecutionReport;
      return this.apiClient.callApi(
        '/v1/orders/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OrdersGet operation.
     * @callback module:api/OrdersApi~v1OrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all orders
     * Get all current open orders across all or single specified exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchangeId Filter the output to the orders from the specific exchange.
     * @param {module:api/OrdersApi~v1OrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewOrder>}
     */
    v1OrdersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exchange_id': opts['exchangeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NewOrder];
      return this.apiClient.callApi(
        '/v1/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OrdersPost operation.
     * @callback module:api/OrdersApi~v1OrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new order
     * This request creating new order for the specific exchange.
     * @param {module:model/NewOrder} newOrder 
     * @param {module:api/OrdersApi~v1OrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionReport}
     */
    v1OrdersPost(newOrder, callback) {
      let postBody = newOrder;
      // verify the required parameter 'newOrder' is set
      if (newOrder === undefined || newOrder === null) {
        throw new Error("Missing the required parameter 'newOrder' when calling v1OrdersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'appliction/json'];
      let returnType = ExecutionReport;
      return this.apiClient.callApi(
        '/v1/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OrdersStatusClientOrderIdGet operation.
     * @callback module:api/OrdersApi~v1OrdersStatusClientOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order status
     * Get the current order status for the specified order. The requested order can no longer be active.
     * @param {String} clientOrderId Order Client Id of the order for which the status is requested.
     * @param {module:api/OrdersApi~v1OrdersStatusClientOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionReport}
     */
    v1OrdersStatusClientOrderIdGet(clientOrderId, callback) {
      let postBody = null;
      // verify the required parameter 'clientOrderId' is set
      if (clientOrderId === undefined || clientOrderId === null) {
        throw new Error("Missing the required parameter 'clientOrderId' when calling v1OrdersStatusClientOrderIdGet");
      }

      let pathParams = {
        'client_order_id': clientOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionReport;
      return this.apiClient.callApi(
        '/v1/orders/status/{client_order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
