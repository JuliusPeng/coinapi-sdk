# coding: utf-8

"""
    OEML - REST API

    This section will provide necessary information about the `CoinAPI OEML REST API` protocol.   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BalanceData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_id_exchange': 'str',
        'asset_id_coinapi': 'str',
        'balance': 'float',
        'available': 'float',
        'locked': 'float',
        'last_updated_by': 'str',
        'rate_usd': 'float'
    }

    attribute_map = {
        'asset_id_exchange': 'asset_id_exchange',
        'asset_id_coinapi': 'asset_id_coinapi',
        'balance': 'balance',
        'available': 'available',
        'locked': 'locked',
        'last_updated_by': 'last_updated_by',
        'rate_usd': 'rate_usd'
    }

    def __init__(self, asset_id_exchange=None, asset_id_coinapi=None, balance=None, available=None, locked=None, last_updated_by=None, rate_usd=None, local_vars_configuration=None):  # noqa: E501
        """BalanceData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asset_id_exchange = None
        self._asset_id_coinapi = None
        self._balance = None
        self._available = None
        self._locked = None
        self._last_updated_by = None
        self._rate_usd = None
        self.discriminator = None

        if asset_id_exchange is not None:
            self.asset_id_exchange = asset_id_exchange
        if asset_id_coinapi is not None:
            self.asset_id_coinapi = asset_id_coinapi
        if balance is not None:
            self.balance = balance
        if available is not None:
            self.available = available
        if locked is not None:
            self.locked = locked
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if rate_usd is not None:
            self.rate_usd = rate_usd

    @property
    def asset_id_exchange(self):
        """Gets the asset_id_exchange of this BalanceData.  # noqa: E501

        Exchange currency code.  # noqa: E501

        :return: The asset_id_exchange of this BalanceData.  # noqa: E501
        :rtype: str
        """
        return self._asset_id_exchange

    @asset_id_exchange.setter
    def asset_id_exchange(self, asset_id_exchange):
        """Sets the asset_id_exchange of this BalanceData.

        Exchange currency code.  # noqa: E501

        :param asset_id_exchange: The asset_id_exchange of this BalanceData.  # noqa: E501
        :type: str
        """

        self._asset_id_exchange = asset_id_exchange

    @property
    def asset_id_coinapi(self):
        """Gets the asset_id_coinapi of this BalanceData.  # noqa: E501

        CoinAPI currency code.  # noqa: E501

        :return: The asset_id_coinapi of this BalanceData.  # noqa: E501
        :rtype: str
        """
        return self._asset_id_coinapi

    @asset_id_coinapi.setter
    def asset_id_coinapi(self, asset_id_coinapi):
        """Sets the asset_id_coinapi of this BalanceData.

        CoinAPI currency code.  # noqa: E501

        :param asset_id_coinapi: The asset_id_coinapi of this BalanceData.  # noqa: E501
        :type: str
        """

        self._asset_id_coinapi = asset_id_coinapi

    @property
    def balance(self):
        """Gets the balance of this BalanceData.  # noqa: E501

        Value of the current total currency balance on the exchange.  # noqa: E501

        :return: The balance of this BalanceData.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BalanceData.

        Value of the current total currency balance on the exchange.  # noqa: E501

        :param balance: The balance of this BalanceData.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def available(self):
        """Gets the available of this BalanceData.  # noqa: E501

        Value of the current available currency balance on the exchange that can be used as collateral.  # noqa: E501

        :return: The available of this BalanceData.  # noqa: E501
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this BalanceData.

        Value of the current available currency balance on the exchange that can be used as collateral.  # noqa: E501

        :param available: The available of this BalanceData.  # noqa: E501
        :type: float
        """

        self._available = available

    @property
    def locked(self):
        """Gets the locked of this BalanceData.  # noqa: E501

        Value of the current locked currency balance by the exchange.  # noqa: E501

        :return: The locked of this BalanceData.  # noqa: E501
        :rtype: float
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this BalanceData.

        Value of the current locked currency balance by the exchange.  # noqa: E501

        :param locked: The locked of this BalanceData.  # noqa: E501
        :type: float
        """

        self._locked = locked

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this BalanceData.  # noqa: E501

        Source of the last modification.   # noqa: E501

        :return: The last_updated_by of this BalanceData.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this BalanceData.

        Source of the last modification.   # noqa: E501

        :param last_updated_by: The last_updated_by of this BalanceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIALIZATION", "BALANCE_MANAGER", "EXCHANGE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and last_updated_by not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `last_updated_by` ({0}), must be one of {1}"  # noqa: E501
                .format(last_updated_by, allowed_values)
            )

        self._last_updated_by = last_updated_by

    @property
    def rate_usd(self):
        """Gets the rate_usd of this BalanceData.  # noqa: E501

        Current exchange rate to the USD for the single unit of the currency.   # noqa: E501

        :return: The rate_usd of this BalanceData.  # noqa: E501
        :rtype: float
        """
        return self._rate_usd

    @rate_usd.setter
    def rate_usd(self, rate_usd):
        """Sets the rate_usd of this BalanceData.

        Current exchange rate to the USD for the single unit of the currency.   # noqa: E501

        :param rate_usd: The rate_usd of this BalanceData.  # noqa: E501
        :type: float
        """

        self._rate_usd = rate_usd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BalanceData):
            return True

        return self.to_dict() != other.to_dict()
