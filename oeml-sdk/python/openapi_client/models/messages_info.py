# coding: utf-8

"""
    OEML - REST API

    This section will provide necessary information about the `CoinAPI OEML REST API` protocol.   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MessagesInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'exchange_id': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'type': 'type',
        'exchange_id': 'exchange_id',
        'error_message': 'error_message'
    }

    def __init__(self, type=None, exchange_id=None, error_message=None, local_vars_configuration=None):  # noqa: E501
        """MessagesInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._exchange_id = None
        self._error_message = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if error_message is not None:
            self.error_message = error_message

    @property
    def type(self):
        """Gets the type of this MessagesInfo.  # noqa: E501

        Type of message  # noqa: E501

        :return: The type of this MessagesInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessagesInfo.

        Type of message  # noqa: E501

        :param type: The type of this MessagesInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def exchange_id(self):
        """Gets the exchange_id of this MessagesInfo.  # noqa: E501

        Exchange name  # noqa: E501

        :return: The exchange_id of this MessagesInfo.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this MessagesInfo.

        Exchange name  # noqa: E501

        :param exchange_id: The exchange_id of this MessagesInfo.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def error_message(self):
        """Gets the error_message of this MessagesInfo.  # noqa: E501

        Error message  # noqa: E501

        :return: The error_message of this MessagesInfo.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MessagesInfo.

        Error message  # noqa: E501

        :param error_message: The error_message of this MessagesInfo.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessagesInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MessagesInfo):
            return True

        return self.to_dict() != other.to_dict()
