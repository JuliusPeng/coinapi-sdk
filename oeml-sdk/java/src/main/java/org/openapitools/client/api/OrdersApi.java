/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrderValidationError;
import org.openapitools.client.model.ExecutionReport;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.NewOrder;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderCancelAllRequest;
import org.openapitools.client.model.OrderCancelSingleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1OrdersCancelAllPost
     * @param orderCancelAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersCancelAllPostCall(OrderCancelAllRequest orderCancelAllRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orderCancelAllRequest;

        // create path and map variables
        String localVarPath = "/v1/orders/cancel/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrdersCancelAllPostValidateBeforeCall(OrderCancelAllRequest orderCancelAllRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderCancelAllRequest' is set
        if (orderCancelAllRequest == null) {
            throw new ApiException("Missing the required parameter 'orderCancelAllRequest' when calling v1OrdersCancelAllPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrdersCancelAllPostCall(orderCancelAllRequest, _callback);
        return localVarCall;

    }

    /**
     * Cancel all orders
     * This request cancels all open orders across all or single specified exchange.
     * @param orderCancelAllRequest  (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public Message v1OrdersCancelAllPost(OrderCancelAllRequest orderCancelAllRequest) throws ApiException {
        ApiResponse<Message> localVarResp = v1OrdersCancelAllPostWithHttpInfo(orderCancelAllRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel all orders
     * This request cancels all open orders across all or single specified exchange.
     * @param orderCancelAllRequest  (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> v1OrdersCancelAllPostWithHttpInfo(OrderCancelAllRequest orderCancelAllRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrdersCancelAllPostValidateBeforeCall(orderCancelAllRequest, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel all orders (asynchronously)
     * This request cancels all open orders across all or single specified exchange.
     * @param orderCancelAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersCancelAllPostAsync(OrderCancelAllRequest orderCancelAllRequest, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrdersCancelAllPostValidateBeforeCall(orderCancelAllRequest, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrdersCancelPost
     * @param orderCancelSingleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersCancelPostCall(OrderCancelSingleRequest orderCancelSingleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orderCancelSingleRequest;

        // create path and map variables
        String localVarPath = "/v1/orders/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "appliction/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrdersCancelPostValidateBeforeCall(OrderCancelSingleRequest orderCancelSingleRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderCancelSingleRequest' is set
        if (orderCancelSingleRequest == null) {
            throw new ApiException("Missing the required parameter 'orderCancelSingleRequest' when calling v1OrdersCancelPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrdersCancelPostCall(orderCancelSingleRequest, _callback);
        return localVarCall;

    }

    /**
     * Cancel order
     * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
     * @param orderCancelSingleRequest  (required)
     * @return ExecutionReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public ExecutionReport v1OrdersCancelPost(OrderCancelSingleRequest orderCancelSingleRequest) throws ApiException {
        ApiResponse<ExecutionReport> localVarResp = v1OrdersCancelPostWithHttpInfo(orderCancelSingleRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel order
     * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
     * @param orderCancelSingleRequest  (required)
     * @return ApiResponse&lt;ExecutionReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecutionReport> v1OrdersCancelPostWithHttpInfo(OrderCancelSingleRequest orderCancelSingleRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrdersCancelPostValidateBeforeCall(orderCancelSingleRequest, null);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel order (asynchronously)
     * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
     * @param orderCancelSingleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersCancelPostAsync(OrderCancelSingleRequest orderCancelSingleRequest, final ApiCallback<ExecutionReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrdersCancelPostValidateBeforeCall(orderCancelSingleRequest, _callback);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrdersGet
     * @param exchangeId Filter the output to the orders from the specific exchange. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of requested open orders. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersGetCall(String exchangeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrdersGetValidateBeforeCall(String exchangeId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1OrdersGetCall(exchangeId, _callback);
        return localVarCall;

    }

    /**
     * Get all orders
     * Get all current open orders across all or single specified exchange.
     * @param exchangeId Filter the output to the orders from the specific exchange. (optional)
     * @return List&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of requested open orders. </td><td>  -  </td></tr>
     </table>
     */
    public List<Order> v1OrdersGet(String exchangeId) throws ApiException {
        ApiResponse<List<Order>> localVarResp = v1OrdersGetWithHttpInfo(exchangeId);
        return localVarResp.getData();
    }

    /**
     * Get all orders
     * Get all current open orders across all or single specified exchange.
     * @param exchangeId Filter the output to the orders from the specific exchange. (optional)
     * @return ApiResponse&lt;List&lt;Order&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of requested open orders. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Order>> v1OrdersGetWithHttpInfo(String exchangeId) throws ApiException {
        okhttp3.Call localVarCall = v1OrdersGetValidateBeforeCall(exchangeId, null);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all orders (asynchronously)
     * Get all current open orders across all or single specified exchange.
     * @param exchangeId Filter the output to the orders from the specific exchange. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of requested open orders. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersGetAsync(String exchangeId, final ApiCallback<List<Order>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrdersGetValidateBeforeCall(exchangeId, _callback);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrdersPost
     * @param newOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersPostCall(NewOrder newOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newOrder;

        // create path and map variables
        String localVarPath = "/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "appliction/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrdersPostValidateBeforeCall(NewOrder newOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newOrder' is set
        if (newOrder == null) {
            throw new ApiException("Missing the required parameter 'newOrder' when calling v1OrdersPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrdersPostCall(newOrder, _callback);
        return localVarCall;

    }

    /**
     * Create new order
     * This request creating new order for the specific exchange.
     * @param newOrder  (required)
     * @return ExecutionReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public ExecutionReport v1OrdersPost(NewOrder newOrder) throws ApiException {
        ApiResponse<ExecutionReport> localVarResp = v1OrdersPostWithHttpInfo(newOrder);
        return localVarResp.getData();
    }

    /**
     * Create new order
     * This request creating new order for the specific exchange.
     * @param newOrder  (required)
     * @return ApiResponse&lt;ExecutionReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecutionReport> v1OrdersPostWithHttpInfo(NewOrder newOrder) throws ApiException {
        okhttp3.Call localVarCall = v1OrdersPostValidateBeforeCall(newOrder, null);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new order (asynchronously)
     * This request creating new order for the specific exchange.
     * @param newOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Exchange not registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersPostAsync(NewOrder newOrder, final ApiCallback<ExecutionReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrdersPostValidateBeforeCall(newOrder, _callback);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrdersStatusClientOrderIdGet
     * @param clientOrderId Order Client Id of the order for which the status is requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The order was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The order was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersStatusClientOrderIdGetCall(String clientOrderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/status/{client_order_id}"
            .replaceAll("\\{" + "client_order_id" + "\\}", localVarApiClient.escapeString(clientOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrdersStatusClientOrderIdGetValidateBeforeCall(String clientOrderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientOrderId' is set
        if (clientOrderId == null) {
            throw new ApiException("Missing the required parameter 'clientOrderId' when calling v1OrdersStatusClientOrderIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrdersStatusClientOrderIdGetCall(clientOrderId, _callback);
        return localVarCall;

    }

    /**
     * Get order status
     * Get the current order status for the specified order. The requested order can no longer be active.
     * @param clientOrderId Order Client Id of the order for which the status is requested. (required)
     * @return ExecutionReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The order was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The order was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ExecutionReport v1OrdersStatusClientOrderIdGet(String clientOrderId) throws ApiException {
        ApiResponse<ExecutionReport> localVarResp = v1OrdersStatusClientOrderIdGetWithHttpInfo(clientOrderId);
        return localVarResp.getData();
    }

    /**
     * Get order status
     * Get the current order status for the specified order. The requested order can no longer be active.
     * @param clientOrderId Order Client Id of the order for which the status is requested. (required)
     * @return ApiResponse&lt;ExecutionReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The order was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The order was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecutionReport> v1OrdersStatusClientOrderIdGetWithHttpInfo(String clientOrderId) throws ApiException {
        okhttp3.Call localVarCall = v1OrdersStatusClientOrderIdGetValidateBeforeCall(clientOrderId, null);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get order status (asynchronously)
     * Get the current order status for the specified order. The requested order can no longer be active.
     * @param clientOrderId Order Client Id of the order for which the status is requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The order was found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The order was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrdersStatusClientOrderIdGetAsync(String clientOrderId, final ApiCallback<ExecutionReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrdersStatusClientOrderIdGetValidateBeforeCall(clientOrderId, _callback);
        Type localVarReturnType = new TypeToken<ExecutionReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
