/**
* OEML - REST API
* This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json
/**
 * 
 * @param id Unique position ID
 * @param symbolExchange The contract for this position.
 * @param symbolCoinapi The coinapi contract for this position.
 * @param avgEntryPrice 
 * @param quantity The current position amount in contracts.
 * @param isBuy 
 * @param unrealisedPnL Unrealised PNL is all the unrealised profit or loss coming from your portfolio's open positions.
 * @param leverage 1 / initMarginReq.
 * @param crossMargin True/false depending on whether you set cross margin on this position.
 * @param liquidationPrice Once markPrice reaches this price, this position will be liquidated.
 * @param rawData 
 */

data class PositionData (
    /* Unique position ID */
    @Json(name = "id")
    val id: kotlin.String? = null,
    /* The contract for this position. */
    @Json(name = "symbol_exchange")
    val symbolExchange: kotlin.String? = null,
    /* The coinapi contract for this position. */
    @Json(name = "symbol_coinapi")
    val symbolCoinapi: kotlin.String? = null,
    @Json(name = "avg_entry_price")
    val avgEntryPrice: java.math.BigDecimal? = null,
    /* The current position amount in contracts. */
    @Json(name = "quantity")
    val quantity: java.math.BigDecimal? = null,
    @Json(name = "is_buy")
    val isBuy: kotlin.Boolean? = null,
    /* Unrealised PNL is all the unrealised profit or loss coming from your portfolio's open positions. */
    @Json(name = "unrealised_pn_l")
    val unrealisedPnL: java.math.BigDecimal? = null,
    /* 1 / initMarginReq. */
    @Json(name = "leverage")
    val leverage: java.math.BigDecimal? = null,
    /* True/false depending on whether you set cross margin on this position. */
    @Json(name = "cross_margin")
    val crossMargin: kotlin.Boolean? = null,
    /* Once markPrice reaches this price, this position will be liquidated. */
    @Json(name = "liquidation_price")
    val liquidationPrice: java.math.BigDecimal? = null,
    @Json(name = "raw_data")
    val rawData: kotlin.String? = null
)

