/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol.\n
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOrdersApi {
    OASClient client;

    public OASOrdersApi(OASClient client) {
        this.client = client;
    }

    public OASOrdersApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Cancel all orders
     * This request cancels all open orders across all or single specified exchange.
     * @param oaSCancelOrderAllRequest  (required)
     * @return OASMessage
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessage v1OrdersCancelAllPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCancelOrderAllRequest'), 'oaSCancelOrderAllRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessage) client.invoke(
            'POST', '/v1/orders/cancel/all',
            (OASCancelOrderAllRequest) params.get('oaSCancelOrderAllRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASMessage.class
        );
    }
    /**
     * Cancel order
     * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
     * @param oaSCancelOrderSingleRequest  (required)
     * @return OASOrderExecutionReport
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrderExecutionReport v1OrdersCancelPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCancelOrderSingleRequest'), 'oaSCancelOrderSingleRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrderExecutionReport) client.invoke(
            'POST', '/v1/orders/cancel',
            (OASCancelOrderSingleRequest) params.get('oaSCancelOrderSingleRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'appliction/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASOrderExecutionReport.class
        );
    }
    /**
     * Get all orders
     * Get all current open orders across all or single specified exchange.
     * @param exchangeId Filter the output to the orders from the specific exchange. (optional)
     * @return List<OASOrderExecutionReport>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASOrderExecutionReport> v1OrdersGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASOrderExecutionReport>) client.invoke(
            'GET', '/v1/orders', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            List<OASOrderExecutionReport>.class
        );
    }
    /**
     * Create new order
     * This request creating new order for the specific exchange.
     * @param oaSNewOrderSingle  (required)
     * @return OASOrderExecutionReport
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrderExecutionReport v1OrdersPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSNewOrderSingle'), 'oaSNewOrderSingle');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrderExecutionReport) client.invoke(
            'POST', '/v1/orders',
            (OASNewOrderSingle) params.get('oaSNewOrderSingle'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'appliction/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASOrderExecutionReport.class
        );
    }
    /**
     * Get order status
     * Get the current order status for the specified order. The requested order can no longer be active.
     * @param clientOrderId The unique identifier of the order assigned by the client. (required)
     * @return OASOrderExecutionReport
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrderExecutionReport v1OrdersStatusClientOrderIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('clientOrderId'), 'clientOrderId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrderExecutionReport) client.invoke(
            'GET', '/v1/orders/status/{client_order_id}', '',
            query, form,
            new Map<String, Object>{
                'client_order_id' => (String) params.get('clientOrderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASOrderExecutionReport.class
        );
    }
}
