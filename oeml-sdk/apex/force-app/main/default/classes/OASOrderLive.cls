/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol.\n
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASOrderLive
 */
public class OASOrderLive implements OAS.MappedProperties {
    /**
     * Result type name
     * @return r_type
     */
    public String r_type { get; set; }

    /**
     * Exchange name
     * @return exchangeId
     */
    public String exchangeId { get; set; }

    /**
     * Client unique identifier for the trade.
     * @return id
     */
    public String id { get; set; }

    /**
     * Hash client id
     * @return clientOrderIdFormatExchange
     */
    public String clientOrderIdFormatExchange { get; set; }

    /**
     * Exchange order id
     * @return exchangeOrderId
     */
    public String exchangeOrderId { get; set; }

    /**
     * Amount open
     * @return amountOpen
     */
    public Double amountOpen { get; set; }

    /**
     * Amount filled
     * @return amountFilled
     */
    public Double amountFilled { get; set; }

    /**
     * Get status
     * @return status
     */
    public OASOrderStatus status { get; set; }

    /**
     * History of order status changes
     * @return timeOrder
     */
    public List<List<String>> timeOrder { get; set; }

    /**
     * Error message
     * @return errorMessage
     */
    public String errorMessage { get; set; }

    /**
     * Client unique identifier for the trade.
     * @return clientOrderId
     */
    public String clientOrderId { get; set; }

    /**
     * The symbol of the order.
     * @return symbolExchange
     */
    public String symbolExchange { get; set; }

    /**
     * The CoinAPI symbol of the order.
     * @return symbolCoinapi
     */
    public String symbolCoinapi { get; set; }

    /**
     * Quoted decimal amount to purchase.
     * @return amountOrder
     */
    public Double amountOrder { get; set; }

    /**
     * Quoted decimal amount to spend per unit.
     * @return price
     */
    public Double price { get; set; }

    /**
     * Buy or Sell
     */
    public enum SideEnum {
        BUY,
        SELL
    }

    /**
     * Buy or Sell
     * @return side
     */
    public SideEnum side { get; set; }

    /**
     * The order type.
     */
    public enum OrderTypeEnum {
        LIMIT
    }

    /**
     * The order type.
     * @return orderType
     */
    public OrderTypeEnum orderType { get; set; }

    /**
     * Get timeInForce
     * @return timeInForce
     */
    public OASTimeInForce timeInForce { get; set; }

    /**
     * Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE, GOOD_TILL_TIME_OMS
     * @return expireTime
     */
    public Date expireTime { get; set; }

    /**
     * Gets or Sets execInst
     */
    public enum ExecInstEnum {
        MAKER_OR_CANCEL
    }

    /**
     * TODO: description exec inst\n\n| Parameter | Description |\n|-----------|--------|\n| `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |\n##### Exec inst options\n\n| Exchange | MAKER_OR_CANCEL |\n| --- | --- |\n| BINANCE | X |\n| BITFINEX | X |\n| BITMEX | X |\n| BLOCKCHAINEXCHANGE | X |\n| BITSTAMP |  |\n| COINBASE | X |\n| GEMINI | X |\n| KRAKEN | X |\n| POLONIEX | X |\n| HITBTC |  |\n| KRAKENFTS | X |\n
     * @return execInst
     */
    public List<ExecInstEnum> execInst { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'type' => 'r_type',
        'exchange_id' => 'exchangeId',
        'client_order_id_format_exchange' => 'clientOrderIdFormatExchange',
        'exchange_order_id' => 'exchangeOrderId',
        'amount_open' => 'amountOpen',
        'amount_filled' => 'amountFilled',
        'time_order' => 'timeOrder',
        'error_message' => 'errorMessage',
        'client_order_id' => 'clientOrderId',
        'symbol_exchange' => 'symbolExchange',
        'symbol_coinapi' => 'symbolCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASOrderLive() {
        timeOrder = new List<List<String>>();
        execInst = new List<ExecInstEnum>();
    }

    public static OASOrderLive getExample() {
        OASOrderLive orderLive = new OASOrderLive();
          orderLive.r_type = 'updateOrder';
          orderLive.exchangeId = 'KRAKEN';
          orderLive.id = 'KPP-222389382-AQ';
          orderLive.clientOrderIdFormatExchange = 'f81211e2-27c4-b86a-8143-01088ba9222c';
          orderLive.exchangeOrderId = '90832ASASAS89789-1112';
          orderLive.amountOpen = 0.22;
          orderLive.amountFilled = 0.0;
          orderLive.status = OASOrderStatus.getExample();
          orderLive.timeOrder = new List<List<String>>{new List<String>{'["RECEIVED","2020-05-27T11:16:20.1677709Z"]'}};
          orderLive.errorMessage = '{"result":"error","reason":"InsufficientFunds","message":"Failed to place buy order on symbol \'BTCUSD\' for price $7,000.00 and quantity 0.22 BTC due to insufficient funds"}';
          orderLive.clientOrderId = 'KPP-222389382-AQ';
          orderLive.symbolExchange = 'BTCUSD';
          orderLive.symbolCoinapi = 'KRAKEN_SPOT_BTC_USD';
          orderLive.amountOrder = 0.045;
          orderLive.price = 0.0783;
          orderLive.side = SideEnum.BUY;
          orderLive.orderType = OrderTypeEnum.LIMIT;
          orderLive.timeInForce = OASTimeInForce.getExample();
          orderLive.expireTime = Date.getExample();
          orderLive.execInst = List<ExecInstEnum>.LIST_EXECINSTENUM_NEW_LIST_STRING_MAKER_OR_CANCEL_;
        return orderLive;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrderLive) {           
            OASOrderLive orderLive = (OASOrderLive) obj;
            return this.r_type == orderLive.r_type
                && this.exchangeId == orderLive.exchangeId
                && this.id == orderLive.id
                && this.clientOrderIdFormatExchange == orderLive.clientOrderIdFormatExchange
                && this.exchangeOrderId == orderLive.exchangeOrderId
                && this.amountOpen == orderLive.amountOpen
                && this.amountFilled == orderLive.amountFilled
                && this.status == orderLive.status
                && this.timeOrder == orderLive.timeOrder
                && this.errorMessage == orderLive.errorMessage
                && this.clientOrderId == orderLive.clientOrderId
                && this.symbolExchange == orderLive.symbolExchange
                && this.symbolCoinapi == orderLive.symbolCoinapi
                && this.amountOrder == orderLive.amountOrder
                && this.price == orderLive.price
                && this.side == orderLive.side
                && this.orderType == orderLive.orderType
                && this.timeInForce == orderLive.timeInForce
                && this.expireTime == orderLive.expireTime
                && this.execInst == orderLive.execInst;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (r_type == null ? 0 : System.hashCode(r_type));
        hashCode = (17 * hashCode) + (exchangeId == null ? 0 : System.hashCode(exchangeId));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (clientOrderIdFormatExchange == null ? 0 : System.hashCode(clientOrderIdFormatExchange));
        hashCode = (17 * hashCode) + (exchangeOrderId == null ? 0 : System.hashCode(exchangeOrderId));
        hashCode = (17 * hashCode) + (amountOpen == null ? 0 : System.hashCode(amountOpen));
        hashCode = (17 * hashCode) + (amountFilled == null ? 0 : System.hashCode(amountFilled));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (timeOrder == null ? 0 : System.hashCode(timeOrder));
        hashCode = (17 * hashCode) + (errorMessage == null ? 0 : System.hashCode(errorMessage));
        hashCode = (17 * hashCode) + (clientOrderId == null ? 0 : System.hashCode(clientOrderId));
        hashCode = (17 * hashCode) + (symbolExchange == null ? 0 : System.hashCode(symbolExchange));
        hashCode = (17 * hashCode) + (symbolCoinapi == null ? 0 : System.hashCode(symbolCoinapi));
        hashCode = (17 * hashCode) + (amountOrder == null ? 0 : System.hashCode(amountOrder));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (side == null ? 0 : System.hashCode(side));
        hashCode = (17 * hashCode) + (orderType == null ? 0 : System.hashCode(orderType));
        hashCode = (17 * hashCode) + (timeInForce == null ? 0 : System.hashCode(timeInForce));
        hashCode = (17 * hashCode) + (expireTime == null ? 0 : System.hashCode(expireTime));
        hashCode = (17 * hashCode) + (execInst == null ? 0 : System.hashCode(execInst));
        return hashCode;
    }
}

