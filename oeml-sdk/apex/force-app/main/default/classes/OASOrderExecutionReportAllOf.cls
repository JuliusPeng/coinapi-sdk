/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol.\n
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * The order execution report message.
 */
public class OASOrderExecutionReportAllOf implements OAS.MappedProperties {
    /**
     * The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it.
     * @return clientOrderIdFormatExchange
     */
    public String clientOrderIdFormatExchange { get; set; }

    /**
     * The unique identifier of the order assigned by the exchange.
     * @return exchangeOrderId
     */
    public String exchangeOrderId { get; set; }

    /**
     * Amount open
     * @return amountOpen
     */
    public Double amountOpen { get; set; }

    /**
     * Amount filled
     * @return amountFilled
     */
    public Double amountFilled { get; set; }

    /**
     * Get status
     * @return status
     */
    public OASOrdStatus status { get; set; }

    /**
     * Timestamped history of order status changes.
     * @return timeOrder
     */
    public List<List<String>> timeOrder { get; set; }

    /**
     * Error message
     * @return errorMessage
     */
    public String errorMessage { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'client_order_id_format_exchange' => 'clientOrderIdFormatExchange',
        'exchange_order_id' => 'exchangeOrderId',
        'amount_open' => 'amountOpen',
        'amount_filled' => 'amountFilled',
        'time_order' => 'timeOrder',
        'error_message' => 'errorMessage'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASOrderExecutionReportAllOf() {
        timeOrder = new List<List<String>>();
    }

    public static OASOrderExecutionReportAllOf getExample() {
        OASOrderExecutionReportAllOf orderExecutionReportAllOf = new OASOrderExecutionReportAllOf();
          orderExecutionReportAllOf.clientOrderIdFormatExchange = 'f81211e2-27c4-b86a-8143-01088ba9222c';
          orderExecutionReportAllOf.exchangeOrderId = '3456456754';
          orderExecutionReportAllOf.amountOpen = 0.22;
          orderExecutionReportAllOf.amountFilled = 0.0;
          orderExecutionReportAllOf.status = OASOrdStatus.getExample();
          orderExecutionReportAllOf.timeOrder = new List<List<String>>{new List<String>{'[["RECEIVED","2020-05-27T11:16:20.1677709Z"],["REJECTED","2020-05-27T11:16:20.1677710Z"]]'}};
          orderExecutionReportAllOf.errorMessage = '{"result":"error","reason":"InsufficientFunds","message":"Failed to place buy order on symbol \\\'BTCUSD\\\' for price $7,000.00 and quantity 0.22 BTC due to insufficient funds"}';
        return orderExecutionReportAllOf;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrderExecutionReportAllOf) {           
            OASOrderExecutionReportAllOf orderExecutionReportAllOf = (OASOrderExecutionReportAllOf) obj;
            return this.clientOrderIdFormatExchange == orderExecutionReportAllOf.clientOrderIdFormatExchange
                && this.exchangeOrderId == orderExecutionReportAllOf.exchangeOrderId
                && this.amountOpen == orderExecutionReportAllOf.amountOpen
                && this.amountFilled == orderExecutionReportAllOf.amountFilled
                && this.status == orderExecutionReportAllOf.status
                && this.timeOrder == orderExecutionReportAllOf.timeOrder
                && this.errorMessage == orderExecutionReportAllOf.errorMessage;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (clientOrderIdFormatExchange == null ? 0 : System.hashCode(clientOrderIdFormatExchange));
        hashCode = (17 * hashCode) + (exchangeOrderId == null ? 0 : System.hashCode(exchangeOrderId));
        hashCode = (17 * hashCode) + (amountOpen == null ? 0 : System.hashCode(amountOpen));
        hashCode = (17 * hashCode) + (amountFilled == null ? 0 : System.hashCode(amountFilled));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (timeOrder == null ? 0 : System.hashCode(timeOrder));
        hashCode = (17 * hashCode) + (errorMessage == null ? 0 : System.hashCode(errorMessage));
        return hashCode;
    }
}

