/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol.\n
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASPositionData
 */
public class OASPositionData implements OAS.MappedProperties {
    /**
     * Exchange symbol.
     * @return symbolExchange
     */
    public String symbolExchange { get; set; }

    /**
     * CoinAPI symbol.
     * @return symbolCoinapi
     */
    public String symbolCoinapi { get; set; }

    /**
     * Calculated average price of all fills on this position.
     * @return avgEntryPrice
     */
    public Double avgEntryPrice { get; set; }

    /**
     * The current position quantity.
     * @return quantity
     */
    public Double quantity { get; set; }

    /**
     * Get side
     * @return side
     */
    public OASOrdSide side { get; set; }

    /**
     * Unrealised profit or loss (PNL) of this position.
     * @return unrealizedPnl
     */
    public Double unrealizedPnl { get; set; }

    /**
     * Leverage for this position reported by the exchange.
     * @return leverage
     */
    public Double leverage { get; set; }

    /**
     * Is cross margin mode enable for this position?
     * @return crossMargin
     */
    public Boolean crossMargin { get; set; }

    /**
     * Liquidation price. If mark price will reach this value, the position will be liquidated.
     * @return liquidationPrice
     */
    public Double liquidationPrice { get; set; }

    /**
     * Get rawData
     * @return rawData
     */
    public Object rawData { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_exchange' => 'symbolExchange',
        'symbol_coinapi' => 'symbolCoinapi',
        'avg_entry_price' => 'avgEntryPrice',
        'unrealized_pnl' => 'unrealizedPnl',
        'cross_margin' => 'crossMargin',
        'liquidation_price' => 'liquidationPrice',
        'raw_data' => 'rawData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASPositionData getExample() {
        OASPositionData positionData = new OASPositionData();
          positionData.symbolExchange = 'XBTUSD';
          positionData.symbolCoinapi = 'BITMEX_PERP_BTC_USD';
          positionData.avgEntryPrice = 0.00134444;
          positionData.quantity = 7;
          positionData.side = OASOrdSide.getExample();
          positionData.unrealizedPnl = 0.0;
          positionData.leverage = 0.0;
          positionData.crossMargin = true;
          positionData.liquidationPrice = 0.072323;
          positionData.rawData = Other position related information provided by the exchange.;
        return positionData;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASPositionData) {           
            OASPositionData positionData = (OASPositionData) obj;
            return this.symbolExchange == positionData.symbolExchange
                && this.symbolCoinapi == positionData.symbolCoinapi
                && this.avgEntryPrice == positionData.avgEntryPrice
                && this.quantity == positionData.quantity
                && this.side == positionData.side
                && this.unrealizedPnl == positionData.unrealizedPnl
                && this.leverage == positionData.leverage
                && this.crossMargin == positionData.crossMargin
                && this.liquidationPrice == positionData.liquidationPrice
                && this.rawData == positionData.rawData;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbolExchange == null ? 0 : System.hashCode(symbolExchange));
        hashCode = (17 * hashCode) + (symbolCoinapi == null ? 0 : System.hashCode(symbolCoinapi));
        hashCode = (17 * hashCode) + (avgEntryPrice == null ? 0 : System.hashCode(avgEntryPrice));
        hashCode = (17 * hashCode) + (quantity == null ? 0 : System.hashCode(quantity));
        hashCode = (17 * hashCode) + (side == null ? 0 : System.hashCode(side));
        hashCode = (17 * hashCode) + (unrealizedPnl == null ? 0 : System.hashCode(unrealizedPnl));
        hashCode = (17 * hashCode) + (leverage == null ? 0 : System.hashCode(leverage));
        hashCode = (17 * hashCode) + (crossMargin == null ? 0 : System.hashCode(crossMargin));
        hashCode = (17 * hashCode) + (liquidationPrice == null ? 0 : System.hashCode(liquidationPrice));
        hashCode = (17 * hashCode) + (rawData == null ? 0 : System.hashCode(rawData));
        return hashCode;
    }
}

