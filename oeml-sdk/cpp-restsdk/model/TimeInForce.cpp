/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TimeInForce.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TimeInForce::TimeInForce()
{
}

TimeInForce::~TimeInForce()
{
}

void TimeInForce::validate()
{
    // TODO: implement validation
}

web::json::value TimeInForce::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_CANCEL) val = web::json::value::string(U("GOOD_TILL_CANCEL"));
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_TIME_EXCHANGE) val = web::json::value::string(U("GOOD_TILL_TIME_EXCHANGE"));
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_TIME_OMS) val = web::json::value::string(U("GOOD_TILL_TIME_OMS"));
    if (m_value == eTimeInForce::TimeInForce_FILL_OR_KILL) val = web::json::value::string(U("FILL_OR_KILL"));
    if (m_value == eTimeInForce::TimeInForce_IMMEDIATE_OR_CANCEL) val = web::json::value::string(U("IMMEDIATE_OR_CANCEL"));
    if (m_value == eTimeInForce::TimeInForce_AUCTION_ONLY) val = web::json::value::string(U("AUCTION_ONLY"));
    if (m_value == eTimeInForce::TimeInForce_INDICATION_OF_INTEREST) val = web::json::value::string(U("INDICATION_OF_INTEREST"));

    return val;
}

bool TimeInForce::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("GOOD_TILL_CANCEL")) m_value = eTimeInForce::TimeInForce_GOOD_TILL_CANCEL;
    if (s == utility::conversions::to_string_t("GOOD_TILL_TIME_EXCHANGE")) m_value = eTimeInForce::TimeInForce_GOOD_TILL_TIME_EXCHANGE;
    if (s == utility::conversions::to_string_t("GOOD_TILL_TIME_OMS")) m_value = eTimeInForce::TimeInForce_GOOD_TILL_TIME_OMS;
    if (s == utility::conversions::to_string_t("FILL_OR_KILL")) m_value = eTimeInForce::TimeInForce_FILL_OR_KILL;
    if (s == utility::conversions::to_string_t("IMMEDIATE_OR_CANCEL")) m_value = eTimeInForce::TimeInForce_IMMEDIATE_OR_CANCEL;
    if (s == utility::conversions::to_string_t("AUCTION_ONLY")) m_value = eTimeInForce::TimeInForce_AUCTION_ONLY;
    if (s == utility::conversions::to_string_t("INDICATION_OF_INTEREST")) m_value = eTimeInForce::TimeInForce_INDICATION_OF_INTEREST;
    return true;
}

void TimeInForce::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_CANCEL) s = utility::conversions::to_string_t("GOOD_TILL_CANCEL");
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_TIME_EXCHANGE) s = utility::conversions::to_string_t("GOOD_TILL_TIME_EXCHANGE");
    if (m_value == eTimeInForce::TimeInForce_GOOD_TILL_TIME_OMS) s = utility::conversions::to_string_t("GOOD_TILL_TIME_OMS");
    if (m_value == eTimeInForce::TimeInForce_FILL_OR_KILL) s = utility::conversions::to_string_t("FILL_OR_KILL");
    if (m_value == eTimeInForce::TimeInForce_IMMEDIATE_OR_CANCEL) s = utility::conversions::to_string_t("IMMEDIATE_OR_CANCEL");
    if (m_value == eTimeInForce::TimeInForce_AUCTION_ONLY) s = utility::conversions::to_string_t("AUCTION_ONLY");
    if (m_value == eTimeInForce::TimeInForce_INDICATION_OF_INTEREST) s = utility::conversions::to_string_t("INDICATION_OF_INTEREST");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool TimeInForce::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eTimeInForce v;

        
        if (s == utility::conversions::to_string_t("GOOD_TILL_CANCEL")) v = eTimeInForce::TimeInForce_GOOD_TILL_CANCEL;
        if (s == utility::conversions::to_string_t("GOOD_TILL_TIME_EXCHANGE")) v = eTimeInForce::TimeInForce_GOOD_TILL_TIME_EXCHANGE;
        if (s == utility::conversions::to_string_t("GOOD_TILL_TIME_OMS")) v = eTimeInForce::TimeInForce_GOOD_TILL_TIME_OMS;
        if (s == utility::conversions::to_string_t("FILL_OR_KILL")) v = eTimeInForce::TimeInForce_FILL_OR_KILL;
        if (s == utility::conversions::to_string_t("IMMEDIATE_OR_CANCEL")) v = eTimeInForce::TimeInForce_IMMEDIATE_OR_CANCEL;
        if (s == utility::conversions::to_string_t("AUCTION_ONLY")) v = eTimeInForce::TimeInForce_AUCTION_ONLY;
        if (s == utility::conversions::to_string_t("INDICATION_OF_INTEREST")) v = eTimeInForce::TimeInForce_INDICATION_OF_INTEREST;

        setValue(v);
    }
    return ok;
}

TimeInForce::eTimeInForce TimeInForce::getValue() const
{
   return m_value;
}

void TimeInForce::setValue(TimeInForce::eTimeInForce const value)
{
   m_value = value;
}


}
}
}
}


