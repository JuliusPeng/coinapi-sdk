/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Balance_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Balance_data::Balance_data()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Symbol_exchange = utility::conversions::to_string_t("");
    m_Symbol_exchangeIsSet = false;
    m_Symbol_coinapi = utility::conversions::to_string_t("");
    m_Symbol_coinapiIsSet = false;
    m_Balance = 0.0f;
    m_BalanceIsSet = false;
    m_Available = 0.0f;
    m_AvailableIsSet = false;
    m_Locked = 0.0f;
    m_LockedIsSet = false;
    m_Update_origin = utility::conversions::to_string_t("");
    m_Update_originIsSet = false;
}

Balance_data::~Balance_data()
{
}

void Balance_data::validate()
{
    // TODO: implement validation
}

web::json::value Balance_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Symbol_exchangeIsSet)
    {
        val[utility::conversions::to_string_t("symbol_exchange")] = ModelBase::toJson(m_Symbol_exchange);
    }
    if(m_Symbol_coinapiIsSet)
    {
        val[utility::conversions::to_string_t("symbol_coinapi")] = ModelBase::toJson(m_Symbol_coinapi);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_AvailableIsSet)
    {
        val[utility::conversions::to_string_t("available")] = ModelBase::toJson(m_Available);
    }
    if(m_LockedIsSet)
    {
        val[utility::conversions::to_string_t("locked")] = ModelBase::toJson(m_Locked);
    }
    if(m_Update_originIsSet)
    {
        val[utility::conversions::to_string_t("update_origin")] = ModelBase::toJson(m_Update_origin);
    }

    return val;
}

bool Balance_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol_exchange")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("symbol_exchange"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_symbol_exchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_symbol_exchange);
            setSymbolExchange(refVal_symbol_exchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol_coinapi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("symbol_coinapi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_symbol_coinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_symbol_coinapi);
            setSymbolCoinapi(refVal_symbol_coinapi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("balance"));
        if(!fieldValue.is_null())
        {
            float refVal_balance;
            ok &= ModelBase::fromJson(fieldValue, refVal_balance);
            setBalance(refVal_balance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("available")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("available"));
        if(!fieldValue.is_null())
        {
            float refVal_available;
            ok &= ModelBase::fromJson(fieldValue, refVal_available);
            setAvailable(refVal_available);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locked")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locked"));
        if(!fieldValue.is_null())
        {
            float refVal_locked;
            ok &= ModelBase::fromJson(fieldValue, refVal_locked);
            setLocked(refVal_locked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("update_origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("update_origin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_update_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_update_origin);
            setUpdateOrigin(refVal_update_origin);
        }
    }
    return ok;
}

void Balance_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Symbol_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol_exchange"), m_Symbol_exchange));
    }
    if(m_Symbol_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol_coinapi"), m_Symbol_coinapi));
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    }
    if(m_AvailableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("available"), m_Available));
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locked"), m_Locked));
    }
    if(m_Update_originIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("update_origin"), m_Update_origin));
    }
}

bool Balance_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol_exchange")))
    {
        utility::string_t refVal_symbol_exchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol_exchange")), refVal_symbol_exchange );
        setSymbolExchange(refVal_symbol_exchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol_coinapi")))
    {
        utility::string_t refVal_symbol_coinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol_coinapi")), refVal_symbol_coinapi );
        setSymbolCoinapi(refVal_symbol_coinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("balance")))
    {
        float refVal_balance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance")), refVal_balance );
        setBalance(refVal_balance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("available")))
    {
        float refVal_available;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("available")), refVal_available );
        setAvailable(refVal_available);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locked")))
    {
        float refVal_locked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locked")), refVal_locked );
        setLocked(refVal_locked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("update_origin")))
    {
        utility::string_t refVal_update_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("update_origin")), refVal_update_origin );
        setUpdateOrigin(refVal_update_origin);
    }
    return ok;
}

utility::string_t Balance_data::getId() const
{
    return m_Id;
}

void Balance_data::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Balance_data::idIsSet() const
{
    return m_IdIsSet;
}

void Balance_data::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Balance_data::getSymbolExchange() const
{
    return m_Symbol_exchange;
}

void Balance_data::setSymbolExchange(const utility::string_t& value)
{
    m_Symbol_exchange = value;
    m_Symbol_exchangeIsSet = true;
}

bool Balance_data::symbolExchangeIsSet() const
{
    return m_Symbol_exchangeIsSet;
}

void Balance_data::unsetSymbol_exchange()
{
    m_Symbol_exchangeIsSet = false;
}
utility::string_t Balance_data::getSymbolCoinapi() const
{
    return m_Symbol_coinapi;
}

void Balance_data::setSymbolCoinapi(const utility::string_t& value)
{
    m_Symbol_coinapi = value;
    m_Symbol_coinapiIsSet = true;
}

bool Balance_data::symbolCoinapiIsSet() const
{
    return m_Symbol_coinapiIsSet;
}

void Balance_data::unsetSymbol_coinapi()
{
    m_Symbol_coinapiIsSet = false;
}
float Balance_data::getBalance() const
{
    return m_Balance;
}

void Balance_data::setBalance(float value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool Balance_data::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void Balance_data::unsetBalance()
{
    m_BalanceIsSet = false;
}
float Balance_data::getAvailable() const
{
    return m_Available;
}

void Balance_data::setAvailable(float value)
{
    m_Available = value;
    m_AvailableIsSet = true;
}

bool Balance_data::availableIsSet() const
{
    return m_AvailableIsSet;
}

void Balance_data::unsetAvailable()
{
    m_AvailableIsSet = false;
}
float Balance_data::getLocked() const
{
    return m_Locked;
}

void Balance_data::setLocked(float value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}

bool Balance_data::lockedIsSet() const
{
    return m_LockedIsSet;
}

void Balance_data::unsetLocked()
{
    m_LockedIsSet = false;
}
utility::string_t Balance_data::getUpdateOrigin() const
{
    return m_Update_origin;
}

void Balance_data::setUpdateOrigin(const utility::string_t& value)
{
    m_Update_origin = value;
    m_Update_originIsSet = true;
}

bool Balance_data::updateOriginIsSet() const
{
    return m_Update_originIsSet;
}

void Balance_data::unsetUpdate_origin()
{
    m_Update_originIsSet = false;
}
}
}
}
}


