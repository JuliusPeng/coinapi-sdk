/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_


#include "../ApiClient.h"

#include "CancelAllOrder.h"
#include "CancelOrder.h"
#include "CreateOrder400.h"
#include "Messages.h"
#include "MessagesOk.h"
#include "NewOrder.h"
#include "Order.h"
#include "OrderLive.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  OrdersApi 
{
public:

    explicit OrdersApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~OrdersApi();

    /// <summary>
    /// Cancel all order
    /// </summary>
    /// <remarks>
    /// Cancel all existing order.
    /// </remarks>
    /// <param name="cancelAllOrder"></param>
    pplx::task<std::shared_ptr<MessagesOk>> v1OrdersCancelAllPost(
        std::shared_ptr<CancelAllOrder> cancelAllOrder
    ) const;
    /// <summary>
    /// Cancel order
    /// </summary>
    /// <remarks>
    /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
    /// </remarks>
    /// <param name="cancelOrder"></param>
    pplx::task<std::shared_ptr<OrderLive>> v1OrdersCancelPost(
        std::shared_ptr<CancelOrder> cancelOrder
    ) const;
    /// <summary>
    /// Get orders
    /// </summary>
    /// <remarks>
    /// List your current open orders.
    /// </remarks>
    /// <param name="exchangeId">Exchange name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Order>>> v1OrdersGet(
        boost::optional<utility::string_t> exchangeId
    ) const;
    /// <summary>
    /// Create new order
    /// </summary>
    /// <remarks>
    /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
    /// </remarks>
    /// <param name="newOrder"></param>
    pplx::task<std::shared_ptr<OrderLive>> v1OrdersPost(
        std::shared_ptr<NewOrder> newOrder
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_ */

