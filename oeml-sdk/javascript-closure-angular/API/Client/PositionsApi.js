/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PositionsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This section will provide necessary information about the &#x60;CoinAPI OEML REST API&#x60; protocol. 
 * Version: v1
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/coinapi/coinapi-sdk/blob/master/LICENSE
 */

goog.provide('API.Client.PositionsApi');

goog.require('API.Client.Message');
goog.require('API.Client.Position');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PositionsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PositionsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PositionsApiBasePath')) :
                   'http://localhost:8080';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PositionsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PositionsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PositionsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get open positions
 * Get current open positions across all or single exchange.
 * @param {!string=} opt_exchangeId Filter the balances to the specific exchange.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Position>>}
 */
API.Client.PositionsApi.prototype.v1PositionsGet = function(opt_exchangeId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/positions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_exchangeId !== undefined) {
    queryParameters['exchange_id'] = opt_exchangeId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
