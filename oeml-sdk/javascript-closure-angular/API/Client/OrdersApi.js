/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.OrdersApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This section will provide necessary information about the &#x60;CoinAPI OEML REST API&#x60; protocol. 
 * Version: v1
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://github.com/coinapi/coinapi-sdk/blob/master/LICENSE
 */

goog.provide('API.Client.OrdersApi');

goog.require('API.Client.CancelAllOrder');
goog.require('API.Client.CancelOrder');
goog.require('API.Client.NewOrder');
goog.require('API.Client.createOrder400');
goog.require('API.Client.messages');
goog.require('API.Client.messagesOk');
goog.require('API.Client.order');
goog.require('API.Client.orderLive');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.OrdersApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('OrdersApiBasePath') ?
                   /** @type {!string} */ ($injector.get('OrdersApiBasePath')) :
                   'http://localhost:8080/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('OrdersApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('OrdersApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.OrdersApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Cancel all order
 * Cancel all existing order.
 * @param {!CancelAllOrder} cancelAllOrder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.messagesOk>}
 */
API.Client.OrdersApi.prototype.v1OrdersCancelAllPost = function(cancelAllOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/orders/cancel/all';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cancelAllOrder' is set
  if (!cancelAllOrder) {
    throw new Error('Missing required parameter cancelAllOrder when calling v1OrdersCancelAllPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: cancelAllOrder,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel order
 * Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
 * @param {!CancelOrder} cancelOrder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orderLive>}
 */
API.Client.OrdersApi.prototype.v1OrdersCancelPost = function(cancelOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/orders/cancel';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cancelOrder' is set
  if (!cancelOrder) {
    throw new Error('Missing required parameter cancelOrder when calling v1OrdersCancelPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: cancelOrder,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get orders
 * List your current open orders.
 * @param {!string=} opt_exchangeId Exchange name
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.order>>}
 */
API.Client.OrdersApi.prototype.v1OrdersGet = function(opt_exchangeId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/orders';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_exchangeId !== undefined) {
    queryParameters['exchange_id'] = opt_exchangeId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create new order
 * You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
 * @param {!NewOrder} newOrder 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.orderLive>}
 */
API.Client.OrdersApi.prototype.v1OrdersPost = function(newOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/orders';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'newOrder' is set
  if (!newOrder) {
    throw new Error('Missing required parameter newOrder when calling v1OrdersPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: newOrder,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
