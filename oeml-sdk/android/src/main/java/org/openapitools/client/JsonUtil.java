/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Balance".equalsIgnoreCase(className)) {
      return new TypeToken<List<Balance>>(){}.getType();
    }
    
    if ("BalanceData".equalsIgnoreCase(className)) {
      return new TypeToken<List<BalanceData>>(){}.getType();
    }
    
    if ("CancelAllOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<CancelAllOrder>>(){}.getType();
    }
    
    if ("CancelOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<CancelOrder>>(){}.getType();
    }
    
    if ("CreateOrder400".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateOrder400>>(){}.getType();
    }
    
    if ("Messages".equalsIgnoreCase(className)) {
      return new TypeToken<List<Messages>>(){}.getType();
    }
    
    if ("MessagesInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<MessagesInfo>>(){}.getType();
    }
    
    if ("MessagesOk".equalsIgnoreCase(className)) {
      return new TypeToken<List<MessagesOk>>(){}.getType();
    }
    
    if ("NewOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewOrder>>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<List<Order>>(){}.getType();
    }
    
    if ("OrderData".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderData>>(){}.getType();
    }
    
    if ("OrderLive".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderLive>>(){}.getType();
    }
    
    if ("OrderStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderStatus>>(){}.getType();
    }
    
    if ("Position".equalsIgnoreCase(className)) {
      return new TypeToken<List<Position>>(){}.getType();
    }
    
    if ("PositionData".equalsIgnoreCase(className)) {
      return new TypeToken<List<PositionData>>(){}.getType();
    }
    
    if ("TimeInForce".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimeInForce>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Balance".equalsIgnoreCase(className)) {
      return new TypeToken<Balance>(){}.getType();
    }
    
    if ("BalanceData".equalsIgnoreCase(className)) {
      return new TypeToken<BalanceData>(){}.getType();
    }
    
    if ("CancelAllOrder".equalsIgnoreCase(className)) {
      return new TypeToken<CancelAllOrder>(){}.getType();
    }
    
    if ("CancelOrder".equalsIgnoreCase(className)) {
      return new TypeToken<CancelOrder>(){}.getType();
    }
    
    if ("CreateOrder400".equalsIgnoreCase(className)) {
      return new TypeToken<CreateOrder400>(){}.getType();
    }
    
    if ("Messages".equalsIgnoreCase(className)) {
      return new TypeToken<Messages>(){}.getType();
    }
    
    if ("MessagesInfo".equalsIgnoreCase(className)) {
      return new TypeToken<MessagesInfo>(){}.getType();
    }
    
    if ("MessagesOk".equalsIgnoreCase(className)) {
      return new TypeToken<MessagesOk>(){}.getType();
    }
    
    if ("NewOrder".equalsIgnoreCase(className)) {
      return new TypeToken<NewOrder>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<Order>(){}.getType();
    }
    
    if ("OrderData".equalsIgnoreCase(className)) {
      return new TypeToken<OrderData>(){}.getType();
    }
    
    if ("OrderLive".equalsIgnoreCase(className)) {
      return new TypeToken<OrderLive>(){}.getType();
    }
    
    if ("OrderStatus".equalsIgnoreCase(className)) {
      return new TypeToken<OrderStatus>(){}.getType();
    }
    
    if ("Position".equalsIgnoreCase(className)) {
      return new TypeToken<Position>(){}.getType();
    }
    
    if ("PositionData".equalsIgnoreCase(className)) {
      return new TypeToken<PositionData>(){}.getType();
    }
    
    if ("TimeInForce".equalsIgnoreCase(className)) {
      return new TypeToken<TimeInForce>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
