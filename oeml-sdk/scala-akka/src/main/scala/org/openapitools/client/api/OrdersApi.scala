/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CancelOrderAllRequest
import org.openapitools.client.model.CancelOrderSingleRequest
import org.openapitools.client.model.Message
import org.openapitools.client.model.NewOrderSingle
import org.openapitools.client.model.OrderExecutionReport
import org.openapitools.client.model.ValidationError
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object OrdersApi {

  def apply(baseUrl: String = "http://localhost:8080") = new OrdersApi(baseUrl)
}

class OrdersApi(baseUrl: String) {
  
  /**
   * This request cancels all open orders across all or single specified exchange.
   * 
   * Expected answers:
   *   code 200 : Message (Result)
   *   code 490 : Message (Exchange is unreachable.)
   * 
   * @param cancelOrderAllRequest 
   */
  def v1OrdersCancelAllPost(cancelOrderAllRequest: CancelOrderAllRequest): ApiRequest[Message] =
    ApiRequest[Message](ApiMethods.POST, baseUrl, "/v1/orders/cancel/all", "application/json")
      .withBody(cancelOrderAllRequest)
      .withSuccessResponse[Message](200)
      .withErrorResponse[Message](490)
      

  /**
   * This request cancels an existing order. The order can be canceled by the client order ID or exchange order ID.
   * 
   * Expected answers:
   *   code 200 : OrderExecutionReport (Canceled order)
   *   code 400 : ValidationError (Validation errors)
   *   code 490 : Message (Exchange is unreachable.)
   * 
   * @param cancelOrderSingleRequest 
   */
  def v1OrdersCancelPost(cancelOrderSingleRequest: CancelOrderSingleRequest): ApiRequest[OrderExecutionReport] =
    ApiRequest[OrderExecutionReport](ApiMethods.POST, baseUrl, "/v1/orders/cancel", "application/json")
      .withBody(cancelOrderSingleRequest)
      .withSuccessResponse[OrderExecutionReport](200)
      .withErrorResponse[ValidationError](400)
      .withErrorResponse[Message](490)
      

  /**
   * Get last execution reports for all open orders across all or single exchange.
   * 
   * Expected answers:
   *   code 200 : Seq[OrderExecutionReport] (Collection of order execution reports.)
   *   code 490 : Message (Filtered exchange is unreachable.)
   * 
   * @param exchangeId Filter the output to the orders from the specific exchange.
   */
  def v1OrdersGet(exchangeId: Option[String] = None): ApiRequest[Seq[OrderExecutionReport]] =
    ApiRequest[Seq[OrderExecutionReport]](ApiMethods.GET, baseUrl, "/v1/orders", "application/json")
      .withQueryParam("exchange_id", exchangeId)
      .withSuccessResponse[Seq[OrderExecutionReport]](200)
      .withErrorResponse[Message](490)
      

  /**
   * This request creating new order for the specific exchange.
   * 
   * Expected answers:
   *   code 200 : OrderExecutionReport (Created)
   *   code 400 : ValidationError (Validation errors)
   *   code 490 : Message (Exchange is unreachable.)
   * 
   * @param newOrderSingle 
   */
  def v1OrdersPost(newOrderSingle: NewOrderSingle): ApiRequest[OrderExecutionReport] =
    ApiRequest[OrderExecutionReport](ApiMethods.POST, baseUrl, "/v1/orders", "application/json")
      .withBody(newOrderSingle)
      .withSuccessResponse[OrderExecutionReport](200)
      .withErrorResponse[ValidationError](400)
      .withErrorResponse[Message](490)
      

  /**
   * Get the last order execution report for the specified order. The requested order does not need to be active/opened.
   * 
   * Expected answers:
   *   code 200 : OrderExecutionReport (The last xecution report of the requested order.)
   *   code 404 : Message (The requested order was not found.)
   * 
   * @param clientOrderId The unique identifier of the order assigned by the client.
   */
  def v1OrdersStatusClientOrderIdGet(clientOrderId: String): ApiRequest[OrderExecutionReport] =
    ApiRequest[OrderExecutionReport](ApiMethods.GET, baseUrl, "/v1/orders/status/{client_order_id}", "application/json")
      .withPathParam("client_order_id", clientOrderId)
      .withSuccessResponse[OrderExecutionReport](200)
      .withErrorResponse[Message](404)
      



}

