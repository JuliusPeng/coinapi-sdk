/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosition_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosition_data::OAIPosition_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosition_data::OAIPosition_data() {
    this->initializeModel();
}

OAIPosition_data::~OAIPosition_data() {}

void OAIPosition_data::initializeModel() {

    m_symbol_exchange_isSet = false;
    m_symbol_exchange_isValid = false;

    m_symbol_coinapi_isSet = false;
    m_symbol_coinapi_isValid = false;

    m_avg_entry_price_isSet = false;
    m_avg_entry_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_unrealized_pnl_isSet = false;
    m_unrealized_pnl_isValid = false;

    m_leverage_isSet = false;
    m_leverage_isValid = false;

    m_cross_margin_isSet = false;
    m_cross_margin_isValid = false;

    m_liquidation_price_isSet = false;
    m_liquidation_price_isValid = false;

    m_raw_data_isSet = false;
    m_raw_data_isValid = false;
}

void OAIPosition_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosition_data::fromJsonObject(QJsonObject json) {

    m_symbol_exchange_isValid = ::OpenAPI::fromJsonValue(symbol_exchange, json[QString("symbol_exchange")]);
    m_symbol_exchange_isSet = !json[QString("symbol_exchange")].isNull() && m_symbol_exchange_isValid;

    m_symbol_coinapi_isValid = ::OpenAPI::fromJsonValue(symbol_coinapi, json[QString("symbol_coinapi")]);
    m_symbol_coinapi_isSet = !json[QString("symbol_coinapi")].isNull() && m_symbol_coinapi_isValid;

    m_avg_entry_price_isValid = ::OpenAPI::fromJsonValue(avg_entry_price, json[QString("avg_entry_price")]);
    m_avg_entry_price_isSet = !json[QString("avg_entry_price")].isNull() && m_avg_entry_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(side, json[QString("side")]);
    m_side_isSet = !json[QString("side")].isNull() && m_side_isValid;

    m_unrealized_pnl_isValid = ::OpenAPI::fromJsonValue(unrealized_pnl, json[QString("unrealized_pnl")]);
    m_unrealized_pnl_isSet = !json[QString("unrealized_pnl")].isNull() && m_unrealized_pnl_isValid;

    m_leverage_isValid = ::OpenAPI::fromJsonValue(leverage, json[QString("leverage")]);
    m_leverage_isSet = !json[QString("leverage")].isNull() && m_leverage_isValid;

    m_cross_margin_isValid = ::OpenAPI::fromJsonValue(cross_margin, json[QString("cross_margin")]);
    m_cross_margin_isSet = !json[QString("cross_margin")].isNull() && m_cross_margin_isValid;

    m_liquidation_price_isValid = ::OpenAPI::fromJsonValue(liquidation_price, json[QString("liquidation_price")]);
    m_liquidation_price_isSet = !json[QString("liquidation_price")].isNull() && m_liquidation_price_isValid;

    m_raw_data_isValid = ::OpenAPI::fromJsonValue(raw_data, json[QString("raw_data")]);
    m_raw_data_isSet = !json[QString("raw_data")].isNull() && m_raw_data_isValid;
}

QString OAIPosition_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosition_data::asJsonObject() const {
    QJsonObject obj;
    if (m_symbol_exchange_isSet) {
        obj.insert(QString("symbol_exchange"), ::OpenAPI::toJsonValue(symbol_exchange));
    }
    if (m_symbol_coinapi_isSet) {
        obj.insert(QString("symbol_coinapi"), ::OpenAPI::toJsonValue(symbol_coinapi));
    }
    if (m_avg_entry_price_isSet) {
        obj.insert(QString("avg_entry_price"), ::OpenAPI::toJsonValue(avg_entry_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(quantity));
    }
    if (side.isSet()) {
        obj.insert(QString("side"), ::OpenAPI::toJsonValue(side));
    }
    if (m_unrealized_pnl_isSet) {
        obj.insert(QString("unrealized_pnl"), ::OpenAPI::toJsonValue(unrealized_pnl));
    }
    if (m_leverage_isSet) {
        obj.insert(QString("leverage"), ::OpenAPI::toJsonValue(leverage));
    }
    if (m_cross_margin_isSet) {
        obj.insert(QString("cross_margin"), ::OpenAPI::toJsonValue(cross_margin));
    }
    if (m_liquidation_price_isSet) {
        obj.insert(QString("liquidation_price"), ::OpenAPI::toJsonValue(liquidation_price));
    }
    if (m_raw_data_isSet) {
        obj.insert(QString("raw_data"), ::OpenAPI::toJsonValue(raw_data));
    }
    return obj;
}

QString OAIPosition_data::getSymbolExchange() const {
    return symbol_exchange;
}
void OAIPosition_data::setSymbolExchange(const QString &symbol_exchange) {
    this->symbol_exchange = symbol_exchange;
    this->m_symbol_exchange_isSet = true;
}

bool OAIPosition_data::is_symbol_exchange_Set() const{
    return m_symbol_exchange_isSet;
}

bool OAIPosition_data::is_symbol_exchange_Valid() const{
    return m_symbol_exchange_isValid;
}

QString OAIPosition_data::getSymbolCoinapi() const {
    return symbol_coinapi;
}
void OAIPosition_data::setSymbolCoinapi(const QString &symbol_coinapi) {
    this->symbol_coinapi = symbol_coinapi;
    this->m_symbol_coinapi_isSet = true;
}

bool OAIPosition_data::is_symbol_coinapi_Set() const{
    return m_symbol_coinapi_isSet;
}

bool OAIPosition_data::is_symbol_coinapi_Valid() const{
    return m_symbol_coinapi_isValid;
}

double OAIPosition_data::getAvgEntryPrice() const {
    return avg_entry_price;
}
void OAIPosition_data::setAvgEntryPrice(const double &avg_entry_price) {
    this->avg_entry_price = avg_entry_price;
    this->m_avg_entry_price_isSet = true;
}

bool OAIPosition_data::is_avg_entry_price_Set() const{
    return m_avg_entry_price_isSet;
}

bool OAIPosition_data::is_avg_entry_price_Valid() const{
    return m_avg_entry_price_isValid;
}

double OAIPosition_data::getQuantity() const {
    return quantity;
}
void OAIPosition_data::setQuantity(const double &quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

bool OAIPosition_data::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIPosition_data::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIOrdSide OAIPosition_data::getSide() const {
    return side;
}
void OAIPosition_data::setSide(const OAIOrdSide &side) {
    this->side = side;
    this->m_side_isSet = true;
}

bool OAIPosition_data::is_side_Set() const{
    return m_side_isSet;
}

bool OAIPosition_data::is_side_Valid() const{
    return m_side_isValid;
}

double OAIPosition_data::getUnrealizedPnl() const {
    return unrealized_pnl;
}
void OAIPosition_data::setUnrealizedPnl(const double &unrealized_pnl) {
    this->unrealized_pnl = unrealized_pnl;
    this->m_unrealized_pnl_isSet = true;
}

bool OAIPosition_data::is_unrealized_pnl_Set() const{
    return m_unrealized_pnl_isSet;
}

bool OAIPosition_data::is_unrealized_pnl_Valid() const{
    return m_unrealized_pnl_isValid;
}

double OAIPosition_data::getLeverage() const {
    return leverage;
}
void OAIPosition_data::setLeverage(const double &leverage) {
    this->leverage = leverage;
    this->m_leverage_isSet = true;
}

bool OAIPosition_data::is_leverage_Set() const{
    return m_leverage_isSet;
}

bool OAIPosition_data::is_leverage_Valid() const{
    return m_leverage_isValid;
}

bool OAIPosition_data::isCrossMargin() const {
    return cross_margin;
}
void OAIPosition_data::setCrossMargin(const bool &cross_margin) {
    this->cross_margin = cross_margin;
    this->m_cross_margin_isSet = true;
}

bool OAIPosition_data::is_cross_margin_Set() const{
    return m_cross_margin_isSet;
}

bool OAIPosition_data::is_cross_margin_Valid() const{
    return m_cross_margin_isValid;
}

double OAIPosition_data::getLiquidationPrice() const {
    return liquidation_price;
}
void OAIPosition_data::setLiquidationPrice(const double &liquidation_price) {
    this->liquidation_price = liquidation_price;
    this->m_liquidation_price_isSet = true;
}

bool OAIPosition_data::is_liquidation_price_Set() const{
    return m_liquidation_price_isSet;
}

bool OAIPosition_data::is_liquidation_price_Valid() const{
    return m_liquidation_price_isValid;
}

OAIObject OAIPosition_data::getRawData() const {
    return raw_data;
}
void OAIPosition_data::setRawData(const OAIObject &raw_data) {
    this->raw_data = raw_data;
    this->m_raw_data_isSet = true;
}

bool OAIPosition_data::is_raw_data_Set() const{
    return m_raw_data_isSet;
}

bool OAIPosition_data::is_raw_data_Valid() const{
    return m_raw_data_isValid;
}

bool OAIPosition_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_symbol_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_coinapi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_entry_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (side.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unrealized_pnl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosition_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
