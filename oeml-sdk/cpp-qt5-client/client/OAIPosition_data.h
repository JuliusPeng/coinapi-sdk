/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPosition_data.h
 *
 * The Position object.
 */

#ifndef OAIPosition_data_H
#define OAIPosition_data_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIOrdSide.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPosition_data : public OAIObject {
public:
    OAIPosition_data();
    OAIPosition_data(QString json);
    ~OAIPosition_data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSymbolIdExchange() const;
    void setSymbolIdExchange(const QString &symbol_id_exchange);
    bool is_symbol_id_exchange_Set() const;
    bool is_symbol_id_exchange_Valid() const;

    QString getSymbolIdCoinapi() const;
    void setSymbolIdCoinapi(const QString &symbol_id_coinapi);
    bool is_symbol_id_coinapi_Set() const;
    bool is_symbol_id_coinapi_Valid() const;

    double getAvgEntryPrice() const;
    void setAvgEntryPrice(const double &avg_entry_price);
    bool is_avg_entry_price_Set() const;
    bool is_avg_entry_price_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    OAIOrdSide getSide() const;
    void setSide(const OAIOrdSide &side);
    bool is_side_Set() const;
    bool is_side_Valid() const;

    double getUnrealizedPnl() const;
    void setUnrealizedPnl(const double &unrealized_pnl);
    bool is_unrealized_pnl_Set() const;
    bool is_unrealized_pnl_Valid() const;

    double getLeverage() const;
    void setLeverage(const double &leverage);
    bool is_leverage_Set() const;
    bool is_leverage_Valid() const;

    bool isCrossMargin() const;
    void setCrossMargin(const bool &cross_margin);
    bool is_cross_margin_Set() const;
    bool is_cross_margin_Valid() const;

    double getLiquidationPrice() const;
    void setLiquidationPrice(const double &liquidation_price);
    bool is_liquidation_price_Set() const;
    bool is_liquidation_price_Valid() const;

    OAIObject getRawData() const;
    void setRawData(const OAIObject &raw_data);
    bool is_raw_data_Set() const;
    bool is_raw_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString symbol_id_exchange;
    bool m_symbol_id_exchange_isSet;
    bool m_symbol_id_exchange_isValid;

    QString symbol_id_coinapi;
    bool m_symbol_id_coinapi_isSet;
    bool m_symbol_id_coinapi_isValid;

    double avg_entry_price;
    bool m_avg_entry_price_isSet;
    bool m_avg_entry_price_isValid;

    double quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    OAIOrdSide side;
    bool m_side_isSet;
    bool m_side_isValid;

    double unrealized_pnl;
    bool m_unrealized_pnl_isSet;
    bool m_unrealized_pnl_isValid;

    double leverage;
    bool m_leverage_isSet;
    bool m_leverage_isValid;

    bool cross_margin;
    bool m_cross_margin_isSet;
    bool m_cross_margin_isValid;

    double liquidation_price;
    bool m_liquidation_price_isSet;
    bool m_liquidation_price_isValid;

    OAIObject raw_data;
    bool m_raw_data_isSet;
    bool m_raw_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPosition_data)

#endif // OAIPosition_data_H
