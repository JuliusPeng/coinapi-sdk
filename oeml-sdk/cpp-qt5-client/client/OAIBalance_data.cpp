/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalance_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalance_data::OAIBalance_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalance_data::OAIBalance_data() {
    this->initializeModel();
}

OAIBalance_data::~OAIBalance_data() {}

void OAIBalance_data::initializeModel() {

    m_asset_id_exchange_isSet = false;
    m_asset_id_exchange_isValid = false;

    m_asset_id_coinapi_isSet = false;
    m_asset_id_coinapi_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_rate_usd_isSet = false;
    m_rate_usd_isValid = false;
}

void OAIBalance_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalance_data::fromJsonObject(QJsonObject json) {

    m_asset_id_exchange_isValid = ::OpenAPI::fromJsonValue(asset_id_exchange, json[QString("asset_id_exchange")]);
    m_asset_id_exchange_isSet = !json[QString("asset_id_exchange")].isNull() && m_asset_id_exchange_isValid;

    m_asset_id_coinapi_isValid = ::OpenAPI::fromJsonValue(asset_id_coinapi, json[QString("asset_id_coinapi")]);
    m_asset_id_coinapi_isSet = !json[QString("asset_id_coinapi")].isNull() && m_asset_id_coinapi_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(last_updated_by, json[QString("last_updated_by")]);
    m_last_updated_by_isSet = !json[QString("last_updated_by")].isNull() && m_last_updated_by_isValid;

    m_rate_usd_isValid = ::OpenAPI::fromJsonValue(rate_usd, json[QString("rate_usd")]);
    m_rate_usd_isSet = !json[QString("rate_usd")].isNull() && m_rate_usd_isValid;
}

QString OAIBalance_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalance_data::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_exchange_isSet) {
        obj.insert(QString("asset_id_exchange"), ::OpenAPI::toJsonValue(asset_id_exchange));
    }
    if (m_asset_id_coinapi_isSet) {
        obj.insert(QString("asset_id_coinapi"), ::OpenAPI::toJsonValue(asset_id_coinapi));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(balance));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(available));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(locked));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("last_updated_by"), ::OpenAPI::toJsonValue(last_updated_by));
    }
    if (m_rate_usd_isSet) {
        obj.insert(QString("rate_usd"), ::OpenAPI::toJsonValue(rate_usd));
    }
    return obj;
}

QString OAIBalance_data::getAssetIdExchange() const {
    return asset_id_exchange;
}
void OAIBalance_data::setAssetIdExchange(const QString &asset_id_exchange) {
    this->asset_id_exchange = asset_id_exchange;
    this->m_asset_id_exchange_isSet = true;
}

bool OAIBalance_data::is_asset_id_exchange_Set() const{
    return m_asset_id_exchange_isSet;
}

bool OAIBalance_data::is_asset_id_exchange_Valid() const{
    return m_asset_id_exchange_isValid;
}

QString OAIBalance_data::getAssetIdCoinapi() const {
    return asset_id_coinapi;
}
void OAIBalance_data::setAssetIdCoinapi(const QString &asset_id_coinapi) {
    this->asset_id_coinapi = asset_id_coinapi;
    this->m_asset_id_coinapi_isSet = true;
}

bool OAIBalance_data::is_asset_id_coinapi_Set() const{
    return m_asset_id_coinapi_isSet;
}

bool OAIBalance_data::is_asset_id_coinapi_Valid() const{
    return m_asset_id_coinapi_isValid;
}

float OAIBalance_data::getBalance() const {
    return balance;
}
void OAIBalance_data::setBalance(const float &balance) {
    this->balance = balance;
    this->m_balance_isSet = true;
}

bool OAIBalance_data::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIBalance_data::is_balance_Valid() const{
    return m_balance_isValid;
}

float OAIBalance_data::getAvailable() const {
    return available;
}
void OAIBalance_data::setAvailable(const float &available) {
    this->available = available;
    this->m_available_isSet = true;
}

bool OAIBalance_data::is_available_Set() const{
    return m_available_isSet;
}

bool OAIBalance_data::is_available_Valid() const{
    return m_available_isValid;
}

float OAIBalance_data::getLocked() const {
    return locked;
}
void OAIBalance_data::setLocked(const float &locked) {
    this->locked = locked;
    this->m_locked_isSet = true;
}

bool OAIBalance_data::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIBalance_data::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIBalance_data::getLastUpdatedBy() const {
    return last_updated_by;
}
void OAIBalance_data::setLastUpdatedBy(const QString &last_updated_by) {
    this->last_updated_by = last_updated_by;
    this->m_last_updated_by_isSet = true;
}

bool OAIBalance_data::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIBalance_data::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

float OAIBalance_data::getRateUsd() const {
    return rate_usd;
}
void OAIBalance_data::setRateUsd(const float &rate_usd) {
    this->rate_usd = rate_usd;
    this->m_rate_usd_isSet = true;
}

bool OAIBalance_data::is_rate_usd_Set() const{
    return m_rate_usd_isSet;
}

bool OAIBalance_data::is_rate_usd_Valid() const{
    return m_rate_usd_isValid;
}

bool OAIBalance_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_coinapi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_usd_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalance_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
