/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdStatus::OAIOrdStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdStatus::OAIOrdStatus() {
    this->initializeModel();
}

OAIOrdStatus::~OAIOrdStatus() {}

void OAIOrdStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrdStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrdStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RECEIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROUTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::ROUTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROUTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::ROUTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::NEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_CANCEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::PENDING_CANCEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_FILLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::PARTIALLY_FILLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::FILLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrdStatus::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrdStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrdStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrdStatus::RECEIVED:
            val = "RECEIVED";
            break;
        case eOAIOrdStatus::ROUTING:
            val = "ROUTING";
            break;
        case eOAIOrdStatus::ROUTED:
            val = "ROUTED";
            break;
        case eOAIOrdStatus::NEW:
            val = "NEW";
            break;
        case eOAIOrdStatus::PENDING_CANCEL:
            val = "PENDING_CANCEL";
            break;
        case eOAIOrdStatus::PARTIALLY_FILLED:
            val = "PARTIALLY_FILLED";
            break;
        case eOAIOrdStatus::FILLED:
            val = "FILLED";
            break;
        case eOAIOrdStatus::CANCELED:
            val = "CANCELED";
            break;
        case eOAIOrdStatus::REJECTED:
            val = "REJECTED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrdStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrdStatus::eOAIOrdStatus OAIOrdStatus::getValue() const {
    return m_value;
}

void OAIOrdStatus::setValue(const OAIOrdStatus::eOAIOrdStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrdStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrdStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
