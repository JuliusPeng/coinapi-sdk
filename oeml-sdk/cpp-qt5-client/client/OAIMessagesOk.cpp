/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagesOk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagesOk::OAIMessagesOk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagesOk::OAIMessagesOk() {
    this->initializeModel();
}

OAIMessagesOk::~OAIMessagesOk() {}

void OAIMessagesOk::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_exchange_id_isSet = false;
    m_exchange_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIMessagesOk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagesOk::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_exchange_id_isValid = ::OpenAPI::fromJsonValue(exchange_id, json[QString("exchange_id")]);
    m_exchange_id_isSet = !json[QString("exchange_id")].isNull() && m_exchange_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIMessagesOk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagesOk::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_exchange_id_isSet) {
        obj.insert(QString("exchange_id"), ::OpenAPI::toJsonValue(exchange_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    return obj;
}

QString OAIMessagesOk::getType() const {
    return type;
}
void OAIMessagesOk::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIMessagesOk::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessagesOk::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMessagesOk::getExchangeId() const {
    return exchange_id;
}
void OAIMessagesOk::setExchangeId(const QString &exchange_id) {
    this->exchange_id = exchange_id;
    this->m_exchange_id_isSet = true;
}

bool OAIMessagesOk::is_exchange_id_Set() const{
    return m_exchange_id_isSet;
}

bool OAIMessagesOk::is_exchange_id_Valid() const{
    return m_exchange_id_isValid;
}

QString OAIMessagesOk::getMessage() const {
    return message;
}
void OAIMessagesOk::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAIMessagesOk::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMessagesOk::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIMessagesOk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagesOk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
