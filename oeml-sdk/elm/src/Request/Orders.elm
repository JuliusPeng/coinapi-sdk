{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Orders exposing (v1OrdersCancelAllPost, v1OrdersCancelPost, v1OrdersGet, v1OrdersPost)

import Data.CancelAllOrder as CancelAllOrder exposing (CancelAllOrder)
import Data.MessagesOk as MessagesOk exposing (MessagesOk)
import Data.Messages as Messages exposing (Messages)
import Data.Order_ as Order_ exposing (Order_)
import Data.CreateOrder400 as CreateOrder400 exposing (CreateOrder400)
import Data.OrderLive as OrderLive exposing (OrderLive)
import Data.CancelOrder as CancelOrder exposing (CancelOrder)
import Data.NewOrder as NewOrder exposing (NewOrder)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "http://localhost:8080/v1"


{-| Cancel all existing order.
-}
v1OrdersCancelAllPost :
    { onSend : Result Http.Error MessagesOk -> msg


    , body : CancelAllOrder


    }
    -> Cmd msg
v1OrdersCancelAllPost params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["v1", "orders", "cancel", "all"]
            (List.filterMap identity [])
        , body = Http.jsonBody <| CancelAllOrder.encode params.body
        , expect = Http.expectJson params.onSend MessagesOk.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
-}
v1OrdersCancelPost :
    { onSend : Result Http.Error OrderLive -> msg


    , body : CancelOrder


    }
    -> Cmd msg
v1OrdersCancelPost params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["v1", "orders", "cancel"]
            (List.filterMap identity [])
        , body = Http.jsonBody <| CancelOrder.encode params.body
        , expect = Http.expectJson params.onSend OrderLive.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| List your current open orders.
-}
v1OrdersGet :
    { onSend : Result Http.Error (List Order_) -> msg




    , exchangeId : Maybe (String)
    }
    -> Cmd msg
v1OrdersGet params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["v1", "orders"]
            (List.filterMap identity [Maybe.map (Url.string "exchange_id" << identity) params.exchangeId])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend (Decode.list Order_.decoder)
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
-}
v1OrdersPost :
    { onSend : Result Http.Error OrderLive -> msg


    , body : NewOrder


    }
    -> Cmd msg
v1OrdersPost params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity []
        , url = Url.crossOrigin basePath
            ["v1", "orders"]
            (List.filterMap identity [])
        , body = Http.jsonBody <| NewOrder.encode params.body
        , expect = Http.expectJson params.onSend OrderLive.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
