{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ValidationError exposing (ValidationError, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ValidationError =
    { type_ : Maybe (String)
    , title : Maybe (String)
    , status : Maybe (Float)
    , traceId : Maybe (String)
    , errors : Maybe (String)
    }


decoder : Decoder ValidationError
decoder =
    Decode.succeed ValidationError
        |> optional "type" (Decode.nullable Decode.string) Nothing
        |> optional "title" (Decode.nullable Decode.string) Nothing
        |> optional "status" (Decode.nullable Decode.float) Nothing
        |> optional "traceId" (Decode.nullable Decode.string) Nothing
        |> optional "errors" (Decode.nullable Decode.string) Nothing



encode : ValidationError -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> ValidationError -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : ValidationError -> List (String, Encode.Value)
encodePairs model =
    [ ( "type", Maybe.withDefault Encode.null (Maybe.map Encode.string model.type_) )
    , ( "title", Maybe.withDefault Encode.null (Maybe.map Encode.string model.title) )
    , ( "status", Maybe.withDefault Encode.null (Maybe.map Encode.float model.status) )
    , ( "traceId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.traceId) )
    , ( "errors", Maybe.withDefault Encode.null (Maybe.map Encode.string model.errors) )
    ]



toString : ValidationError -> String
toString =
    Encode.encode 0 << encode




