{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.BalanceData exposing (BalanceData, LastUpdatedBy(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias BalanceData =
    { assetIdExchange : Maybe (String)
    , assetIdCoinapi : Maybe (String)
    , balance : Maybe (Float)
    , available : Maybe (Float)
    , locked : Maybe (Float)
    , lastUpdatedBy : Maybe (LastUpdatedBy)
    , rateUsd : Maybe (Float)
    }


type LastUpdatedBy
    = INITIALIZATION
    | BALANCEMANAGER
    | EXCHANGE



decoder : Decoder BalanceData
decoder =
    Decode.succeed BalanceData
        |> optional "asset_id_exchange" (Decode.nullable Decode.string) Nothing
        |> optional "asset_id_coinapi" (Decode.nullable Decode.string) Nothing
        |> optional "balance" (Decode.nullable Decode.float) Nothing
        |> optional "available" (Decode.nullable Decode.float) Nothing
        |> optional "locked" (Decode.nullable Decode.float) Nothing
        |> optional "last_updated_by" (Decode.nullable lastUpdatedByDecoder) Nothing
        |> optional "rate_usd" (Decode.nullable Decode.float) Nothing



encode : BalanceData -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> BalanceData -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : BalanceData -> List (String, Encode.Value)
encodePairs model =
    [ ( "asset_id_exchange", Maybe.withDefault Encode.null (Maybe.map Encode.string model.assetIdExchange) )
    , ( "asset_id_coinapi", Maybe.withDefault Encode.null (Maybe.map Encode.string model.assetIdCoinapi) )
    , ( "balance", Maybe.withDefault Encode.null (Maybe.map Encode.float model.balance) )
    , ( "available", Maybe.withDefault Encode.null (Maybe.map Encode.float model.available) )
    , ( "locked", Maybe.withDefault Encode.null (Maybe.map Encode.float model.locked) )
    , ( "last_updated_by", Maybe.withDefault Encode.null (Maybe.map encodeLastUpdatedBy model.lastUpdatedBy) )
    , ( "rate_usd", Maybe.withDefault Encode.null (Maybe.map Encode.float model.rateUsd) )
    ]



toString : BalanceData -> String
toString =
    Encode.encode 0 << encode




lastUpdatedByDecoder : Decoder LastUpdatedBy
lastUpdatedByDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "INITIALIZATION" ->
                        Decode.succeed INITIALIZATION

                    "BALANCE_MANAGER" ->
                        Decode.succeed BALANCEMANAGER

                    "EXCHANGE" ->
                        Decode.succeed EXCHANGE

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeLastUpdatedBy : LastUpdatedBy -> Encode.Value
encodeLastUpdatedBy model =
    case model of
        INITIALIZATION ->
            Encode.string "INITIALIZATION"

        BALANCEMANAGER ->
            Encode.string "BALANCE_MANAGER"

        EXCHANGE ->
            Encode.string "EXCHANGE"




