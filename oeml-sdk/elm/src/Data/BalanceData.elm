{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.BalanceData exposing (BalanceData, UpdateOrigin(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias BalanceData =
    { symbolExchange : Maybe (String)
    , symbolCoinapi : Maybe (String)
    , balance : Maybe (Float)
    , available : Maybe (Float)
    , locked : Maybe (Float)
    , updateOrigin : Maybe (UpdateOrigin)
    }


type UpdateOrigin
    = INITIALIZATION
    | BALANCEMANAGER
    | EXCHANGE



decoder : Decoder BalanceData
decoder =
    Decode.succeed BalanceData
        |> optional "symbol_exchange" (Decode.nullable Decode.string) Nothing
        |> optional "symbol_coinapi" (Decode.nullable Decode.string) Nothing
        |> optional "balance" (Decode.nullable Decode.float) Nothing
        |> optional "available" (Decode.nullable Decode.float) Nothing
        |> optional "locked" (Decode.nullable Decode.float) Nothing
        |> optional "update_origin" (Decode.nullable updateOriginDecoder) Nothing



encode : BalanceData -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> BalanceData -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : BalanceData -> List (String, Encode.Value)
encodePairs model =
    [ ( "symbol_exchange", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolExchange) )
    , ( "symbol_coinapi", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolCoinapi) )
    , ( "balance", Maybe.withDefault Encode.null (Maybe.map Encode.float model.balance) )
    , ( "available", Maybe.withDefault Encode.null (Maybe.map Encode.float model.available) )
    , ( "locked", Maybe.withDefault Encode.null (Maybe.map Encode.float model.locked) )
    , ( "update_origin", Maybe.withDefault Encode.null (Maybe.map encodeUpdateOrigin model.updateOrigin) )
    ]



toString : BalanceData -> String
toString =
    Encode.encode 0 << encode




updateOriginDecoder : Decoder UpdateOrigin
updateOriginDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "INITIALIZATION" ->
                        Decode.succeed INITIALIZATION

                    "BALANCE_MANAGER" ->
                        Decode.succeed BALANCEMANAGER

                    "EXCHANGE" ->
                        Decode.succeed EXCHANGE

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeUpdateOrigin : UpdateOrigin -> Encode.Value
encodeUpdateOrigin model =
    case model of
        INITIALIZATION ->
            Encode.string "INITIALIZATION"

        BALANCEMANAGER ->
            Encode.string "BALANCE_MANAGER"

        EXCHANGE ->
            Encode.string "EXCHANGE"




