{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.OrderStatus exposing (OrderStatus(..), decoder, encode, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Order statuses and the lifecycle are documented in the separate section: <a href=\"#oeml-order-lifecycle\">OEML Order Lifecycle</a> 
-}
type OrderStatus
    = RECEIVED
    | ROUTING
    | ROUTED
    | NEW
    | PENDINGCANCEL
    | PARTIALLYFILLED
    | FILLED
    | CANCELED
    | REJECTED



decoder : Decoder OrderStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "RECEIVED" ->
                        Decode.succeed RECEIVED

                    "ROUTING" ->
                        Decode.succeed ROUTING

                    "ROUTED" ->
                        Decode.succeed ROUTED

                    "NEW" ->
                        Decode.succeed NEW

                    "PENDING_CANCEL" ->
                        Decode.succeed PENDINGCANCEL

                    "PARTIALLY_FILLED" ->
                        Decode.succeed PARTIALLYFILLED

                    "FILLED" ->
                        Decode.succeed FILLED

                    "CANCELED" ->
                        Decode.succeed CANCELED

                    "REJECTED" ->
                        Decode.succeed REJECTED

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encode : OrderStatus -> Encode.Value
encode model =
    case model of
        RECEIVED ->
            Encode.string "RECEIVED"

        ROUTING ->
            Encode.string "ROUTING"

        ROUTED ->
            Encode.string "ROUTED"

        NEW ->
            Encode.string "NEW"

        PENDINGCANCEL ->
            Encode.string "PENDING_CANCEL"

        PARTIALLYFILLED ->
            Encode.string "PARTIALLY_FILLED"

        FILLED ->
            Encode.string "FILLED"

        CANCELED ->
            Encode.string "CANCELED"

        REJECTED ->
            Encode.string "REJECTED"




toString : OrderStatus -> String
toString model =
    case model of
        RECEIVED ->
            "RECEIVED"

        ROUTING ->
            "ROUTING"

        ROUTED ->
            "ROUTED"

        NEW ->
            "NEW"

        PENDINGCANCEL ->
            "PENDING_CANCEL"

        PARTIALLYFILLED ->
            "PARTIALLY_FILLED"

        FILLED ->
            "FILLED"

        CANCELED ->
            "CANCELED"

        REJECTED ->
            "REJECTED"



