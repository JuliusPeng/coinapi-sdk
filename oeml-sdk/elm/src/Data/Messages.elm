{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Messages exposing (Messages, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Messages =
    { type_ : Maybe (String)
    , exchangeId : Maybe (String)
    , message : Maybe (String)
    }


decoder : Decoder Messages
decoder =
    Decode.succeed Messages
        |> optional "type" (Decode.nullable Decode.string) Nothing
        |> optional "exchange_id" (Decode.nullable Decode.string) Nothing
        |> optional "message" (Decode.nullable Decode.string) Nothing



encode : Messages -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Messages -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Messages -> List (String, Encode.Value)
encodePairs model =
    [ ( "type", Maybe.withDefault Encode.null (Maybe.map Encode.string model.type_) )
    , ( "exchange_id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.exchangeId) )
    , ( "message", Maybe.withDefault Encode.null (Maybe.map Encode.string model.message) )
    ]



toString : Messages -> String
toString =
    Encode.encode 0 << encode




