{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.PositionData exposing (PositionData, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias PositionData =
    { id : Maybe (String)
    , symbolExchange : Maybe (String)
    , symbolCoinapi : Maybe (String)
    , avgEntryPrice : Maybe (Float)
    , quantity : Maybe (Float)
    , isBuy : Maybe (Bool)
    , unrealisedPnL : Maybe (Float)
    , leverage : Maybe (Float)
    , crossMargin : Maybe (Bool)
    , liquidationPrice : Maybe (Float)
    , rawData : Maybe (String)
    }


decoder : Decoder PositionData
decoder =
    Decode.succeed PositionData
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "symbol_exchange" (Decode.nullable Decode.string) Nothing
        |> optional "symbol_coinapi" (Decode.nullable Decode.string) Nothing
        |> optional "avg_entry_price" (Decode.nullable Decode.float) Nothing
        |> optional "quantity" (Decode.nullable Decode.float) Nothing
        |> optional "is_buy" (Decode.nullable Decode.bool) Nothing
        |> optional "unrealised_pn_l" (Decode.nullable Decode.float) Nothing
        |> optional "leverage" (Decode.nullable Decode.float) Nothing
        |> optional "cross_margin" (Decode.nullable Decode.bool) Nothing
        |> optional "liquidation_price" (Decode.nullable Decode.float) Nothing
        |> optional "raw_data" (Decode.nullable Decode.string) Nothing



encode : PositionData -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> PositionData -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : PositionData -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "symbol_exchange", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolExchange) )
    , ( "symbol_coinapi", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolCoinapi) )
    , ( "avg_entry_price", Maybe.withDefault Encode.null (Maybe.map Encode.float model.avgEntryPrice) )
    , ( "quantity", Maybe.withDefault Encode.null (Maybe.map Encode.float model.quantity) )
    , ( "is_buy", Maybe.withDefault Encode.null (Maybe.map Encode.bool model.isBuy) )
    , ( "unrealised_pn_l", Maybe.withDefault Encode.null (Maybe.map Encode.float model.unrealisedPnL) )
    , ( "leverage", Maybe.withDefault Encode.null (Maybe.map Encode.float model.leverage) )
    , ( "cross_margin", Maybe.withDefault Encode.null (Maybe.map Encode.bool model.crossMargin) )
    , ( "liquidation_price", Maybe.withDefault Encode.null (Maybe.map Encode.float model.liquidationPrice) )
    , ( "raw_data", Maybe.withDefault Encode.null (Maybe.map Encode.string model.rawData) )
    ]



toString : PositionData -> String
toString =
    Encode.encode 0 << encode




