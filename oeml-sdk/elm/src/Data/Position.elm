{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Position exposing (Position, decoder, encode, encodeWithTag, toString)

import Data.PositionData as PositionData exposing (PositionData)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Position =
    { exchangeId : Maybe (String)
    , data : Maybe ((List PositionData))
    }


decoder : Decoder Position
decoder =
    Decode.succeed Position
        |> optional "exchange_id" (Decode.nullable Decode.string) Nothing
        |> optional "data" (Decode.nullable (Decode.list PositionData.decoder)) Nothing



encode : Position -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Position -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Position -> List (String, Encode.Value)
encodePairs model =
    [ ( "exchange_id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.exchangeId) )
    , ( "data", Maybe.withDefault Encode.null (Maybe.map (Encode.list PositionData.encode) model.data) )
    ]



toString : Position -> String
toString =
    Encode.encode 0 << encode




