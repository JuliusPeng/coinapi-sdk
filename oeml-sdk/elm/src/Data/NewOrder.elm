{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. 

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.NewOrder exposing (NewOrder, ExecInst(..), decoder, encode, encodeWithTag, toString)

import Data.OrdSide as OrdSide exposing (OrdSide)
import Data.OrdType as OrdType exposing (OrdType)
import Data.TimeInForce as TimeInForce exposing (TimeInForce)
import DateOnly exposing (DateOnly)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias NewOrder =
    { exchangeId : String
    , clientOrderId : String
    , symbolExchange : Maybe (String)
    , symbolCoinapi : Maybe (String)
    , amountOrder : Float
    , price : Float
    , side : OrdSide
    , orderType : OrdType
    , timeInForce : TimeInForce
    , expireTime : Maybe (DateOnly)
    , execInst : Maybe ((List ExecInst))
    }


type ExecInst
    = MAKERORCANCEL
    | AUCTIONONLY
    | INDICATIONOFINTEREST



decoder : Decoder NewOrder
decoder =
    Decode.succeed NewOrder
        |> required "exchange_id" Decode.string
        |> required "client_order_id" Decode.string
        |> optional "symbol_exchange" (Decode.nullable Decode.string) Nothing
        |> optional "symbol_coinapi" (Decode.nullable Decode.string) Nothing
        |> required "amount_order" Decode.float
        |> required "price" Decode.float
        |> required "side" OrdSide.decoder
        |> required "order_type" OrdType.decoder
        |> required "time_in_force" TimeInForce.decoder
        |> optional "expire_time" (Decode.nullable DateOnly.decoder) Nothing
        |> optional "exec_inst" (Decode.nullable (Decode.list execInstDecoder)) Nothing



encode : NewOrder -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> NewOrder -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : NewOrder -> List (String, Encode.Value)
encodePairs model =
    [ ( "exchange_id", Encode.string model.exchangeId )
    , ( "client_order_id", Encode.string model.clientOrderId )
    , ( "symbol_exchange", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolExchange) )
    , ( "symbol_coinapi", Maybe.withDefault Encode.null (Maybe.map Encode.string model.symbolCoinapi) )
    , ( "amount_order", Encode.float model.amountOrder )
    , ( "price", Encode.float model.price )
    , ( "side", OrdSide.encode model.side )
    , ( "order_type", OrdType.encode model.orderType )
    , ( "time_in_force", TimeInForce.encode model.timeInForce )
    , ( "expire_time", Maybe.withDefault Encode.null (Maybe.map DateOnly.encode model.expireTime) )
    , ( "exec_inst", Maybe.withDefault Encode.null (Maybe.map (Encode.list encodeExecInst) model.execInst) )
    ]



toString : NewOrder -> String
toString =
    Encode.encode 0 << encode




execInstDecoder : Decoder ExecInst
execInstDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "MAKER_OR_CANCEL" ->
                        Decode.succeed MAKERORCANCEL

                    "AUCTION_ONLY" ->
                        Decode.succeed AUCTIONONLY

                    "INDICATION_OF_INTEREST" ->
                        Decode.succeed INDICATIONOFINTEREST

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeExecInst : ExecInst -> Encode.Value
encodeExecInst model =
    case model of
        MAKERORCANCEL ->
            Encode.string "MAKER_OR_CANCEL"

        AUCTIONONLY ->
            Encode.string "AUCTION_ONLY"

        INDICATIONOFINTEREST ->
            Encode.string "INDICATION_OF_INTEREST"




