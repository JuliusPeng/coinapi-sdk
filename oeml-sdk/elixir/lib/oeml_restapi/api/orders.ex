# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OEML-RESTAPI.Api.Orders do
  @moduledoc """
  API calls for all endpoints tagged `Orders`.
  """

  alias OEML-RESTAPI.Connection
  import OEML-RESTAPI.RequestBuilder


  @doc """
  Cancel all order
  Cancel all existing order.

  ## Parameters

  - connection (OEML-RESTAPI.Connection): Connection to server
  - cancel_all_order (CancelAllOrder): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %OEML-RESTAPI.Model.MessagesOk{}} on success
  {:error, info} on failure
  """
  @spec v1_orders_cancel_all_post(Tesla.Env.client, OEML-RESTAPI.Model.CancelAllOrder.t, keyword()) :: {:ok, OEML-RESTAPI.Model.MessagesOk.t} | {:error, Tesla.Env.t}
  def v1_orders_cancel_all_post(connection, cancel_all_order, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v1/orders/cancel/all")
    |> add_param(:body, :body, cancel_all_order)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OEML-RESTAPI.Model.MessagesOk{}}
    ])
  end

  @doc """
  Cancel order
  Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.

  ## Parameters

  - connection (OEML-RESTAPI.Connection): Connection to server
  - cancel_order (CancelOrder): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %OEML-RESTAPI.Model.OrderLive{}} on success
  {:error, info} on failure
  """
  @spec v1_orders_cancel_post(Tesla.Env.client, OEML-RESTAPI.Model.CancelOrder.t, keyword()) :: {:ok, OEML-RESTAPI.Model.OrderLive.t} | {:error, Tesla.Env.t}
  def v1_orders_cancel_post(connection, cancel_order, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v1/orders/cancel")
    |> add_param(:body, :body, cancel_order)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OEML-RESTAPI.Model.OrderLive{}},
      { 400, %OEML-RESTAPI.Model.CreateOrder400{}},
      { 490, %OEML-RESTAPI.Model.Messages{}}
    ])
  end

  @doc """
  Get orders
  List your current open orders.

  ## Parameters

  - connection (OEML-RESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :exchange_id (String.t): Exchange name
  ## Returns

  {:ok, [%Order{}, ...]} on success
  {:error, info} on failure
  """
  @spec v1_orders_get(Tesla.Env.client, keyword()) :: {:ok, list(OEML-RESTAPI.Model.Order.t)} | {:error, Tesla.Env.t}
  def v1_orders_get(connection, opts \\ []) do
    optional_params = %{
      :"exchange_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/v1/orders")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%OEML-RESTAPI.Model.Order{}]}
    ])
  end

  @doc """
  Create new order
  You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.

  ## Parameters

  - connection (OEML-RESTAPI.Connection): Connection to server
  - new_order (NewOrder): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %OEML-RESTAPI.Model.OrderLive{}} on success
  {:error, info} on failure
  """
  @spec v1_orders_post(Tesla.Env.client, OEML-RESTAPI.Model.NewOrder.t, keyword()) :: {:ok, OEML-RESTAPI.Model.OrderLive.t} | {:error, Tesla.Env.t}
  def v1_orders_post(connection, new_order, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v1/orders")
    |> add_param(:body, :body, new_order)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OEML-RESTAPI.Model.OrderLive{}},
      { 400, %OEML-RESTAPI.Model.CreateOrder400{}},
      { 490, %OEML-RESTAPI.Model.Messages{}}
    ])
  end
end
