/**
 * OMS - REST API .
 * OMS Project
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Balance from './model/Balance';
import BalanceData from './model/BalanceData';
import CancelAllOrder from './model/CancelAllOrder';
import CancelOrder from './model/CancelOrder';
import CreateOrder400 from './model/CreateOrder400';
import Messages from './model/Messages';
import MessagesInfo from './model/MessagesInfo';
import MessagesOk from './model/MessagesOk';
import NewOrder from './model/NewOrder';
import Order from './model/Order';
import OrderData from './model/OrderData';
import OrderLive from './model/OrderLive';
import OrderStatus from './model/OrderStatus';
import Position from './model/Position';
import PositionData from './model/PositionData';
import TimeInForce from './model/TimeInForce';
import BalancesApi from './api/BalancesApi';
import OrdersApi from './api/OrdersApi';
import PositionsApi from './api/PositionsApi';


/**
* OMS_Project.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var OmsRestApi = require('index'); // See note below*.
* var xxxSvc = new OmsRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new OmsRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new OmsRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new OmsRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Balance model constructor.
     * @property {module:model/Balance}
     */
    Balance,

    /**
     * The BalanceData model constructor.
     * @property {module:model/BalanceData}
     */
    BalanceData,

    /**
     * The CancelAllOrder model constructor.
     * @property {module:model/CancelAllOrder}
     */
    CancelAllOrder,

    /**
     * The CancelOrder model constructor.
     * @property {module:model/CancelOrder}
     */
    CancelOrder,

    /**
     * The CreateOrder400 model constructor.
     * @property {module:model/CreateOrder400}
     */
    CreateOrder400,

    /**
     * The Messages model constructor.
     * @property {module:model/Messages}
     */
    Messages,

    /**
     * The MessagesInfo model constructor.
     * @property {module:model/MessagesInfo}
     */
    MessagesInfo,

    /**
     * The MessagesOk model constructor.
     * @property {module:model/MessagesOk}
     */
    MessagesOk,

    /**
     * The NewOrder model constructor.
     * @property {module:model/NewOrder}
     */
    NewOrder,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderData model constructor.
     * @property {module:model/OrderData}
     */
    OrderData,

    /**
     * The OrderLive model constructor.
     * @property {module:model/OrderLive}
     */
    OrderLive,

    /**
     * The OrderStatus model constructor.
     * @property {module:model/OrderStatus}
     */
    OrderStatus,

    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position,

    /**
     * The PositionData model constructor.
     * @property {module:model/PositionData}
     */
    PositionData,

    /**
     * The TimeInForce model constructor.
     * @property {module:model/TimeInForce}
     */
    TimeInForce,

    /**
    * The BalancesApi service constructor.
    * @property {module:api/BalancesApi}
    */
    BalancesApi,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The PositionsApi service constructor.
    * @property {module:api/PositionsApi}
    */
    PositionsApi
};
