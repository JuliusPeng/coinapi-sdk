/**
 * OMS - REST API
 * Lorem2 Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. ###Lifecycle Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. ###Lifecycle 2 Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackhama. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHttpRequest.h"

#include "OAICancelAllOrder.h"
#include "OAICancelOrder.h"
#include "OAICreateOrder400.h"
#include "OAIMessages.h"
#include "OAIMessagesOk.h"
#include "OAINewOrder.h"
#include "OAIOrder.h"
#include "OAIOrderLive.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const QString &scheme = "http", const QString &host = "localhost", int port = 8080, const QString &basePath = "/v1", const int timeOut = 0);
    ~OAIOrdersApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void v1OrdersCancelAllPost(const OAICancelAllOrder &oai_cancel_all_order);
    void v1OrdersCancelPost(const OAICancelOrder &oai_cancel_order);
    void v1OrdersGet(const QString &exchange_id);
    void v1OrdersPost(const OAINewOrder &oai_new_order);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void v1OrdersCancelAllPostCallback(OAIHttpRequestWorker *worker);
    void v1OrdersCancelPostCallback(OAIHttpRequestWorker *worker);
    void v1OrdersGetCallback(OAIHttpRequestWorker *worker);
    void v1OrdersPostCallback(OAIHttpRequestWorker *worker);

signals:

    void v1OrdersCancelAllPostSignal(OAIMessagesOk summary);
    void v1OrdersCancelPostSignal(OAIOrderLive summary);
    void v1OrdersGetSignal(QList<OAIOrder> summary);
    void v1OrdersPostSignal(OAIOrderLive summary);

    void v1OrdersCancelAllPostSignalFull(OAIHttpRequestWorker *worker, OAIMessagesOk summary);
    void v1OrdersCancelPostSignalFull(OAIHttpRequestWorker *worker, OAIOrderLive summary);
    void v1OrdersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrder> summary);
    void v1OrdersPostSignalFull(OAIHttpRequestWorker *worker, OAIOrderLive summary);

    void v1OrdersCancelAllPostSignalE(OAIMessagesOk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersCancelPostSignalE(OAIOrderLive summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersGetSignalE(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersPostSignalE(OAIOrderLive summary, QNetworkReply::NetworkError error_type, QString error_str);

    void v1OrdersCancelAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersCancelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
