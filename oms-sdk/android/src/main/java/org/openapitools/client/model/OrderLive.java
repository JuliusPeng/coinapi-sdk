/**
 * OMS - REST API .
 * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. ###Lifecycle Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. ###Lifecycle 2 Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackhama. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import java.util.Date;
import org.openapitools.client.model.OrderStatus;
import org.openapitools.client.model.TimeInForce;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrderLive {
  
  @SerializedName("type")
  private String type = null;
  @SerializedName("exchange_id")
  private String exchangeId = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("client_order_id_format_exchange")
  private String clientOrderIdFormatExchange = null;
  @SerializedName("exchange_order_id")
  private String exchangeOrderId = null;
  @SerializedName("amount_open")
  private BigDecimal amountOpen = null;
  @SerializedName("amount_filled")
  private BigDecimal amountFilled = null;
  @SerializedName("status")
  private OrderStatus status = null;
  @SerializedName("time_order")
  private List<List<String>> timeOrder = null;
  @SerializedName("error_message")
  private String errorMessage = null;
  @SerializedName("client_order_id")
  private String clientOrderId = null;
  @SerializedName("symbol_exchange")
  private String symbolExchange = null;
  @SerializedName("symbol_coinapi")
  private String symbolCoinapi = null;
  @SerializedName("amount_order")
  private BigDecimal amountOrder = null;
  @SerializedName("price")
  private BigDecimal price = null;
  public enum SideEnum {
     BUY,  SELL, 
  };
  @SerializedName("side")
  private SideEnum side = null;
  public enum OrderTypeEnum {
     LIMIT, 
  };
  @SerializedName("order_type")
  private OrderTypeEnum orderType = null;
  @SerializedName("time_in_force")
  private TimeInForce timeInForce = null;
  @SerializedName("expire_time")
  private Date expireTime = null;
  public enum List&lt;ExecInstEnum&gt; {
     MAKER_OR_CANCEL, 
  };
  @SerializedName("exec_inst")
  private List<ExecInstEnum> execInst = null;

  /**
   * Result type name
   **/
  @ApiModelProperty(value = "Result type name")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Exchange name
   **/
  @ApiModelProperty(value = "Exchange name")
  public String getExchangeId() {
    return exchangeId;
  }
  public void setExchangeId(String exchangeId) {
    this.exchangeId = exchangeId;
  }

  /**
   * Client unique identifier for the trade.
   **/
  @ApiModelProperty(value = "Client unique identifier for the trade.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Hash client id
   **/
  @ApiModelProperty(value = "Hash client id")
  public String getClientOrderIdFormatExchange() {
    return clientOrderIdFormatExchange;
  }
  public void setClientOrderIdFormatExchange(String clientOrderIdFormatExchange) {
    this.clientOrderIdFormatExchange = clientOrderIdFormatExchange;
  }

  /**
   * Exchange order id
   **/
  @ApiModelProperty(value = "Exchange order id")
  public String getExchangeOrderId() {
    return exchangeOrderId;
  }
  public void setExchangeOrderId(String exchangeOrderId) {
    this.exchangeOrderId = exchangeOrderId;
  }

  /**
   * Amount open
   **/
  @ApiModelProperty(value = "Amount open")
  public BigDecimal getAmountOpen() {
    return amountOpen;
  }
  public void setAmountOpen(BigDecimal amountOpen) {
    this.amountOpen = amountOpen;
  }

  /**
   * Amount filled
   **/
  @ApiModelProperty(value = "Amount filled")
  public BigDecimal getAmountFilled() {
    return amountFilled;
  }
  public void setAmountFilled(BigDecimal amountFilled) {
    this.amountFilled = amountFilled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderStatus getStatus() {
    return status;
  }
  public void setStatus(OrderStatus status) {
    this.status = status;
  }

  /**
   * History of order status changes
   **/
  @ApiModelProperty(value = "History of order status changes")
  public List<List<String>> getTimeOrder() {
    return timeOrder;
  }
  public void setTimeOrder(List<List<String>> timeOrder) {
    this.timeOrder = timeOrder;
  }

  /**
   * Error message
   **/
  @ApiModelProperty(value = "Error message")
  public String getErrorMessage() {
    return errorMessage;
  }
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  /**
   * Client unique identifier for the trade.
   **/
  @ApiModelProperty(value = "Client unique identifier for the trade.")
  public String getClientOrderId() {
    return clientOrderId;
  }
  public void setClientOrderId(String clientOrderId) {
    this.clientOrderId = clientOrderId;
  }

  /**
   * The symbol of the order.
   **/
  @ApiModelProperty(value = "The symbol of the order.")
  public String getSymbolExchange() {
    return symbolExchange;
  }
  public void setSymbolExchange(String symbolExchange) {
    this.symbolExchange = symbolExchange;
  }

  /**
   * The CoinAPI symbol of the order.
   **/
  @ApiModelProperty(value = "The CoinAPI symbol of the order.")
  public String getSymbolCoinapi() {
    return symbolCoinapi;
  }
  public void setSymbolCoinapi(String symbolCoinapi) {
    this.symbolCoinapi = symbolCoinapi;
  }

  /**
   * Quoted decimal amount to purchase.
   **/
  @ApiModelProperty(value = "Quoted decimal amount to purchase.")
  public BigDecimal getAmountOrder() {
    return amountOrder;
  }
  public void setAmountOrder(BigDecimal amountOrder) {
    this.amountOrder = amountOrder;
  }

  /**
   * Quoted decimal amount to spend per unit.
   **/
  @ApiModelProperty(value = "Quoted decimal amount to spend per unit.")
  public BigDecimal getPrice() {
    return price;
  }
  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  /**
   * Buy or Sell
   **/
  @ApiModelProperty(value = "Buy or Sell")
  public SideEnum getSide() {
    return side;
  }
  public void setSide(SideEnum side) {
    this.side = side;
  }

  /**
   * The order type.
   **/
  @ApiModelProperty(value = "The order type.")
  public OrderTypeEnum getOrderType() {
    return orderType;
  }
  public void setOrderType(OrderTypeEnum orderType) {
    this.orderType = orderType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimeInForce getTimeInForce() {
    return timeInForce;
  }
  public void setTimeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
  }

  /**
   * Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE, GOOD_TILL_TIME_OMS
   **/
  @ApiModelProperty(value = "Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE, GOOD_TILL_TIME_OMS")
  public Date getExpireTime() {
    return expireTime;
  }
  public void setExpireTime(Date expireTime) {
    this.expireTime = expireTime;
  }

  /**
   * TODO: description exec inst  | Parameter | Description | |-----------|--------| | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. | ##### Exec inst options  | Exchange | MAKER_OR_CANCEL | | --- | --- | | BINANCE | X | | BITFINEX | X | | BITMEX | X | | BLOCKCHAINEXCHANGE | X | | BITSTAMP |  | | COINBASE | X | | GEMINI | X | | KRAKEN | X | | POLONIEX | X | | HITBTC |  | | KRAKENFTS | X | 
   **/
  @ApiModelProperty(value = "TODO: description exec inst  | Parameter | Description | |-----------|--------| | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. | ##### Exec inst options  | Exchange | MAKER_OR_CANCEL | | --- | --- | | BINANCE | X | | BITFINEX | X | | BITMEX | X | | BLOCKCHAINEXCHANGE | X | | BITSTAMP |  | | COINBASE | X | | GEMINI | X | | KRAKEN | X | | POLONIEX | X | | HITBTC |  | | KRAKENFTS | X | ")
  public List<ExecInstEnum> getExecInst() {
    return execInst;
  }
  public void setExecInst(List<ExecInstEnum> execInst) {
    this.execInst = execInst;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLive orderLive = (OrderLive) o;
    return (this.type == null ? orderLive.type == null : this.type.equals(orderLive.type)) &&
        (this.exchangeId == null ? orderLive.exchangeId == null : this.exchangeId.equals(orderLive.exchangeId)) &&
        (this.id == null ? orderLive.id == null : this.id.equals(orderLive.id)) &&
        (this.clientOrderIdFormatExchange == null ? orderLive.clientOrderIdFormatExchange == null : this.clientOrderIdFormatExchange.equals(orderLive.clientOrderIdFormatExchange)) &&
        (this.exchangeOrderId == null ? orderLive.exchangeOrderId == null : this.exchangeOrderId.equals(orderLive.exchangeOrderId)) &&
        (this.amountOpen == null ? orderLive.amountOpen == null : this.amountOpen.equals(orderLive.amountOpen)) &&
        (this.amountFilled == null ? orderLive.amountFilled == null : this.amountFilled.equals(orderLive.amountFilled)) &&
        (this.status == null ? orderLive.status == null : this.status.equals(orderLive.status)) &&
        (this.timeOrder == null ? orderLive.timeOrder == null : this.timeOrder.equals(orderLive.timeOrder)) &&
        (this.errorMessage == null ? orderLive.errorMessage == null : this.errorMessage.equals(orderLive.errorMessage)) &&
        (this.clientOrderId == null ? orderLive.clientOrderId == null : this.clientOrderId.equals(orderLive.clientOrderId)) &&
        (this.symbolExchange == null ? orderLive.symbolExchange == null : this.symbolExchange.equals(orderLive.symbolExchange)) &&
        (this.symbolCoinapi == null ? orderLive.symbolCoinapi == null : this.symbolCoinapi.equals(orderLive.symbolCoinapi)) &&
        (this.amountOrder == null ? orderLive.amountOrder == null : this.amountOrder.equals(orderLive.amountOrder)) &&
        (this.price == null ? orderLive.price == null : this.price.equals(orderLive.price)) &&
        (this.side == null ? orderLive.side == null : this.side.equals(orderLive.side)) &&
        (this.orderType == null ? orderLive.orderType == null : this.orderType.equals(orderLive.orderType)) &&
        (this.timeInForce == null ? orderLive.timeInForce == null : this.timeInForce.equals(orderLive.timeInForce)) &&
        (this.expireTime == null ? orderLive.expireTime == null : this.expireTime.equals(orderLive.expireTime)) &&
        (this.execInst == null ? orderLive.execInst == null : this.execInst.equals(orderLive.execInst));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.exchangeId == null ? 0: this.exchangeId.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.clientOrderIdFormatExchange == null ? 0: this.clientOrderIdFormatExchange.hashCode());
    result = 31 * result + (this.exchangeOrderId == null ? 0: this.exchangeOrderId.hashCode());
    result = 31 * result + (this.amountOpen == null ? 0: this.amountOpen.hashCode());
    result = 31 * result + (this.amountFilled == null ? 0: this.amountFilled.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.timeOrder == null ? 0: this.timeOrder.hashCode());
    result = 31 * result + (this.errorMessage == null ? 0: this.errorMessage.hashCode());
    result = 31 * result + (this.clientOrderId == null ? 0: this.clientOrderId.hashCode());
    result = 31 * result + (this.symbolExchange == null ? 0: this.symbolExchange.hashCode());
    result = 31 * result + (this.symbolCoinapi == null ? 0: this.symbolCoinapi.hashCode());
    result = 31 * result + (this.amountOrder == null ? 0: this.amountOrder.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.side == null ? 0: this.side.hashCode());
    result = 31 * result + (this.orderType == null ? 0: this.orderType.hashCode());
    result = 31 * result + (this.timeInForce == null ? 0: this.timeInForce.hashCode());
    result = 31 * result + (this.expireTime == null ? 0: this.expireTime.hashCode());
    result = 31 * result + (this.execInst == null ? 0: this.execInst.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLive {\n");
    
    sb.append("  type: ").append(type).append("\n");
    sb.append("  exchangeId: ").append(exchangeId).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  clientOrderIdFormatExchange: ").append(clientOrderIdFormatExchange).append("\n");
    sb.append("  exchangeOrderId: ").append(exchangeOrderId).append("\n");
    sb.append("  amountOpen: ").append(amountOpen).append("\n");
    sb.append("  amountFilled: ").append(amountFilled).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  timeOrder: ").append(timeOrder).append("\n");
    sb.append("  errorMessage: ").append(errorMessage).append("\n");
    sb.append("  clientOrderId: ").append(clientOrderId).append("\n");
    sb.append("  symbolExchange: ").append(symbolExchange).append("\n");
    sb.append("  symbolCoinapi: ").append(symbolCoinapi).append("\n");
    sb.append("  amountOrder: ").append(amountOrder).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  side: ").append(side).append("\n");
    sb.append("  orderType: ").append(orderType).append("\n");
    sb.append("  timeInForce: ").append(timeInForce).append("\n");
    sb.append("  expireTime: ").append(expireTime).append("\n");
    sb.append("  execInst: ").append(execInst).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
