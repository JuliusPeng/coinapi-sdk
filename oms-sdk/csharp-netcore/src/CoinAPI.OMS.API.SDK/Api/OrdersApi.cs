/* 
 * OMS - REST API .
 *
 * OMS Project
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoinAPI.OMS.API.SDK.Client;
using CoinAPI.OMS.API.SDK.Model;

namespace CoinAPI.OMS.API.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>MessagesOk</returns>
        MessagesOk V1OrdersCancelAllPost (CancelAllOrder cancelAllOrder);

        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>ApiResponse of MessagesOk</returns>
        ApiResponse<MessagesOk> V1OrdersCancelAllPostWithHttpInfo (CancelAllOrder cancelAllOrder);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>OrderLive</returns>
        OrderLive V1OrdersCancelPost (CancelOrder cancelOrder);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        ApiResponse<OrderLive> V1OrdersCancelPostWithHttpInfo (CancelOrder cancelOrder);
        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> V1OrdersGet (string exchangeId = default(string));

        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> V1OrdersGetWithHttpInfo (string exchangeId = default(string));
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>OrderLive</returns>
        OrderLive V1OrdersPost (NewOrder newOrder);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        ApiResponse<OrderLive> V1OrdersPostWithHttpInfo (NewOrder newOrder);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of MessagesOk</returns>
        System.Threading.Tasks.Task<MessagesOk> V1OrdersCancelAllPostAsync (CancelAllOrder cancelAllOrder);

        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of ApiResponse (MessagesOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesOk>> V1OrdersCancelAllPostAsyncWithHttpInfo (CancelAllOrder cancelAllOrder);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of OrderLive</returns>
        System.Threading.Tasks.Task<OrderLive> V1OrdersCancelPostAsync (CancelOrder cancelOrder);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersCancelPostAsyncWithHttpInfo (CancelOrder cancelOrder);
        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> V1OrdersGetAsync (string exchangeId = default(string));

        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> V1OrdersGetAsyncWithHttpInfo (string exchangeId = default(string));
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of OrderLive</returns>
        System.Threading.Tasks.Task<OrderLive> V1OrdersPostAsync (NewOrder newOrder);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersPostAsyncWithHttpInfo (NewOrder newOrder);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private CoinAPI.OMS.API.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = CoinAPI.OMS.API.SDK.Client.Configuration.MergeConfigurations(
                CoinAPI.OMS.API.SDK.Client.GlobalConfiguration.Instance,
                new CoinAPI.OMS.API.SDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(CoinAPI.OMS.API.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoinAPI.OMS.API.SDK.Client.Configuration.MergeConfigurations(
                CoinAPI.OMS.API.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(CoinAPI.OMS.API.SDK.Client.ISynchronousClient client,CoinAPI.OMS.API.SDK.Client.IAsynchronousClient asyncClient, CoinAPI.OMS.API.SDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.OMS.API.SDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>MessagesOk</returns>
        public MessagesOk V1OrdersCancelAllPost (CancelAllOrder cancelAllOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<MessagesOk> localVarResponse = V1OrdersCancelAllPostWithHttpInfo(cancelAllOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>ApiResponse of MessagesOk</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse< MessagesOk > V1OrdersCancelAllPostWithHttpInfo (CancelAllOrder cancelAllOrder)
        {
            // verify the required parameter 'cancelAllOrder' is set
            if (cancelAllOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'cancelAllOrder' when calling OrdersApi->V1OrdersCancelAllPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelAllOrder;


            // make the HTTP request
            var localVarResponse = this.Client.Post< MessagesOk >("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of MessagesOk</returns>
        public async System.Threading.Tasks.Task<MessagesOk> V1OrdersCancelAllPostAsync (CancelAllOrder cancelAllOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<MessagesOk> localVarResponse = await V1OrdersCancelAllPostAsyncWithHttpInfo(cancelAllOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of ApiResponse (MessagesOk)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<MessagesOk>> V1OrdersCancelAllPostAsyncWithHttpInfo (CancelAllOrder cancelAllOrder)
        {
            // verify the required parameter 'cancelAllOrder' is set
            if (cancelAllOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'cancelAllOrder' when calling OrdersApi->V1OrdersCancelAllPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = cancelAllOrder;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MessagesOk>("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>OrderLive</returns>
        public OrderLive V1OrdersCancelPost (CancelOrder cancelOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive> localVarResponse = V1OrdersCancelPostWithHttpInfo(cancelOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse< OrderLive > V1OrdersCancelPostWithHttpInfo (CancelOrder cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'cancelOrder' when calling OrdersApi->V1OrdersCancelPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrder;


            // make the HTTP request
            var localVarResponse = this.Client.Post< OrderLive >("/v1/orders/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of OrderLive</returns>
        public async System.Threading.Tasks.Task<OrderLive> V1OrdersCancelPostAsync (CancelOrder cancelOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive> localVarResponse = await V1OrdersCancelPostAsyncWithHttpInfo(cancelOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive>> V1OrdersCancelPostAsyncWithHttpInfo (CancelOrder cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'cancelOrder' when calling OrdersApi->V1OrdersCancelPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = cancelOrder;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderLive>("/v1/orders/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> V1OrdersGet (string exchangeId = default(string))
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<List<Order>> localVarResponse = V1OrdersGetWithHttpInfo(exchangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse< List<Order> > V1OrdersGetWithHttpInfo (string exchangeId = default(string))
        {
            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Order> >("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> V1OrdersGetAsync (string exchangeId = default(string))
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<List<Order>> localVarResponse = await V1OrdersGetAsyncWithHttpInfo(exchangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<List<Order>>> V1OrdersGetAsyncWithHttpInfo (string exchangeId = default(string))
        {

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Order>>("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>OrderLive</returns>
        public OrderLive V1OrdersPost (NewOrder newOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive> localVarResponse = V1OrdersPostWithHttpInfo(newOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse< OrderLive > V1OrdersPostWithHttpInfo (NewOrder newOrder)
        {
            // verify the required parameter 'newOrder' is set
            if (newOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'newOrder' when calling OrdersApi->V1OrdersPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = newOrder;


            // make the HTTP request
            var localVarResponse = this.Client.Post< OrderLive >("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of OrderLive</returns>
        public async System.Threading.Tasks.Task<OrderLive> V1OrdersPostAsync (NewOrder newOrder)
        {
             CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive> localVarResponse = await V1OrdersPostAsyncWithHttpInfo(newOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderLive>> V1OrdersPostAsyncWithHttpInfo (NewOrder newOrder)
        {
            // verify the required parameter 'newOrder' is set
            if (newOrder == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'newOrder' when calling OrdersApi->V1OrdersPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = newOrder;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderLive>("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
