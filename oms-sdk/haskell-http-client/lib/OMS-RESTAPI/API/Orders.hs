{-
   OMS - REST API .

   OMS Project

   OpenAPI Version: 3.0.0
   OMS - REST API . API version: v1
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OMS-RESTAPI..API.Orders
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OMS-RESTAPI..API.Orders where

import OMS-RESTAPI..Core
import OMS-RESTAPI..MimeTypes
import OMS-RESTAPI..Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Orders

-- *** v1OrdersCancelAllPost

-- | @POST \/v1\/orders\/cancel\/all@
-- 
-- Cancel all order
-- 
-- Cancel all existing order.
-- 
v1OrdersCancelAllPost 
  :: (Consumes V1OrdersCancelAllPost MimeJSON, MimeRender MimeJSON CancelAllOrder)
  => CancelAllOrder -- ^ "cancelAllOrder"
  -> Request V1OrdersCancelAllPost MimeJSON MessagesOk MimeJSON
v1OrdersCancelAllPost cancelAllOrder =
  _mkRequest "POST" ["/v1/orders/cancel/all"]
    `setBodyParam` cancelAllOrder

data V1OrdersCancelAllPost 
instance HasBodyParam V1OrdersCancelAllPost CancelAllOrder 

-- | @application/json@
instance Consumes V1OrdersCancelAllPost MimeJSON

-- | @application/json@
instance Produces V1OrdersCancelAllPost MimeJSON


-- *** v1OrdersCancelPost

-- | @POST \/v1\/orders\/cancel@
-- 
-- Cancel order
-- 
-- Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
-- 
v1OrdersCancelPost 
  :: (Consumes V1OrdersCancelPost MimeJSON, MimeRender MimeJSON CancelOrder)
  => Accept accept -- ^ request accept ('MimeType')
  -> CancelOrder -- ^ "cancelOrder"
  -> Request V1OrdersCancelPost MimeJSON OrderLive accept
v1OrdersCancelPost  _ cancelOrder =
  _mkRequest "POST" ["/v1/orders/cancel"]
    `setBodyParam` cancelOrder

data V1OrdersCancelPost 
instance HasBodyParam V1OrdersCancelPost CancelOrder 

-- | @application/json@
instance Consumes V1OrdersCancelPost MimeJSON

-- | @application/json@
instance Produces V1OrdersCancelPost MimeJSON
-- | @appliction/json@
instance Produces V1OrdersCancelPost MimeApplictionJson


-- *** v1OrdersGet

-- | @GET \/v1\/orders@
-- 
-- Get orders
-- 
-- List your current open orders.
-- 
v1OrdersGet 
  :: Request V1OrdersGet MimeNoContent [Order] MimeJSON
v1OrdersGet =
  _mkRequest "GET" ["/v1/orders"]

data V1OrdersGet  

-- | /Optional Param/ "exchange_id" - Exchange name
instance HasOptionalParam V1OrdersGet ExchangeId where
  applyOptionalParam req (ExchangeId xs) =
    req `setQuery` toQuery ("exchange_id", Just xs)
-- | @application/json@
instance Produces V1OrdersGet MimeJSON


-- *** v1OrdersPost

-- | @POST \/v1\/orders@
-- 
-- Create new order
-- 
-- You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
-- 
v1OrdersPost 
  :: (Consumes V1OrdersPost MimeJSON, MimeRender MimeJSON NewOrder)
  => Accept accept -- ^ request accept ('MimeType')
  -> NewOrder -- ^ "newOrder"
  -> Request V1OrdersPost MimeJSON OrderLive accept
v1OrdersPost  _ newOrder =
  _mkRequest "POST" ["/v1/orders"]
    `setBodyParam` newOrder

data V1OrdersPost 
instance HasBodyParam V1OrdersPost NewOrder 

-- | @application/json@
instance Consumes V1OrdersPost MimeJSON

-- | @application/json@
instance Produces V1OrdersPost MimeJSON
-- | @appliction/json@
instance Produces V1OrdersPost MimeApplictionJson

