/* 
 * OMS - REST API
 *
 * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. ###Lifecycle Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. ###Lifecycle 2 Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackhama. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.OMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.OMS.REST.V1.Model
{
    /// <summary>
    /// PositionData
    /// </summary>
    [DataContract]
    public partial class PositionData :  IEquatable<PositionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionData" /> class.
        /// </summary>
        /// <param name="id">Unique position ID.</param>
        /// <param name="symbolExchange">The contract for this position..</param>
        /// <param name="symbolCoinapi">The coinapi contract for this position..</param>
        /// <param name="avgEntryPrice">avgEntryPrice.</param>
        /// <param name="quantity">The current position amount in contracts..</param>
        /// <param name="isBuy">isBuy.</param>
        /// <param name="unrealisedPnL">Unrealised PNL is all the unrealised profit or loss coming from your portfolio&#39;s open positions..</param>
        /// <param name="leverage">1 / initMarginReq..</param>
        /// <param name="crossMargin">True/false depending on whether you set cross margin on this position..</param>
        /// <param name="liquidationPrice">Once markPrice reaches this price, this position will be liquidated..</param>
        /// <param name="rawData">rawData.</param>
        public PositionData(string id = default(string), string symbolExchange = default(string), string symbolCoinapi = default(string), decimal avgEntryPrice = default(decimal), decimal quantity = default(decimal), bool isBuy = default(bool), decimal unrealisedPnL = default(decimal), decimal leverage = default(decimal), bool crossMargin = default(bool), decimal liquidationPrice = default(decimal), string rawData = default(string))
        {
            this.Id = id;
            this.SymbolExchange = symbolExchange;
            this.SymbolCoinapi = symbolCoinapi;
            this.AvgEntryPrice = avgEntryPrice;
            this.Quantity = quantity;
            this.IsBuy = isBuy;
            this.UnrealisedPnL = unrealisedPnL;
            this.Leverage = leverage;
            this.CrossMargin = crossMargin;
            this.LiquidationPrice = liquidationPrice;
            this.RawData = rawData;
        }
        
        /// <summary>
        /// Unique position ID
        /// </summary>
        /// <value>Unique position ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The contract for this position.
        /// </summary>
        /// <value>The contract for this position.</value>
        [DataMember(Name="symbol_exchange", EmitDefaultValue=false)]
        public string SymbolExchange { get; set; }

        /// <summary>
        /// The coinapi contract for this position.
        /// </summary>
        /// <value>The coinapi contract for this position.</value>
        [DataMember(Name="symbol_coinapi", EmitDefaultValue=false)]
        public string SymbolCoinapi { get; set; }

        /// <summary>
        /// Gets or Sets AvgEntryPrice
        /// </summary>
        [DataMember(Name="avg_entry_price", EmitDefaultValue=false)]
        public decimal AvgEntryPrice { get; set; }

        /// <summary>
        /// The current position amount in contracts.
        /// </summary>
        /// <value>The current position amount in contracts.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets IsBuy
        /// </summary>
        [DataMember(Name="is_buy", EmitDefaultValue=false)]
        public bool IsBuy { get; set; }

        /// <summary>
        /// Unrealised PNL is all the unrealised profit or loss coming from your portfolio&#39;s open positions.
        /// </summary>
        /// <value>Unrealised PNL is all the unrealised profit or loss coming from your portfolio&#39;s open positions.</value>
        [DataMember(Name="unrealised_pn_l", EmitDefaultValue=false)]
        public decimal UnrealisedPnL { get; set; }

        /// <summary>
        /// 1 / initMarginReq.
        /// </summary>
        /// <value>1 / initMarginReq.</value>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public decimal Leverage { get; set; }

        /// <summary>
        /// True/false depending on whether you set cross margin on this position.
        /// </summary>
        /// <value>True/false depending on whether you set cross margin on this position.</value>
        [DataMember(Name="cross_margin", EmitDefaultValue=false)]
        public bool CrossMargin { get; set; }

        /// <summary>
        /// Once markPrice reaches this price, this position will be liquidated.
        /// </summary>
        /// <value>Once markPrice reaches this price, this position will be liquidated.</value>
        [DataMember(Name="liquidation_price", EmitDefaultValue=false)]
        public decimal LiquidationPrice { get; set; }

        /// <summary>
        /// Gets or Sets RawData
        /// </summary>
        [DataMember(Name="raw_data", EmitDefaultValue=false)]
        public string RawData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SymbolExchange: ").Append(SymbolExchange).Append("\n");
            sb.Append("  SymbolCoinapi: ").Append(SymbolCoinapi).Append("\n");
            sb.Append("  AvgEntryPrice: ").Append(AvgEntryPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  IsBuy: ").Append(IsBuy).Append("\n");
            sb.Append("  UnrealisedPnL: ").Append(UnrealisedPnL).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  CrossMargin: ").Append(CrossMargin).Append("\n");
            sb.Append("  LiquidationPrice: ").Append(LiquidationPrice).Append("\n");
            sb.Append("  RawData: ").Append(RawData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PositionData);
        }

        /// <summary>
        /// Returns true if PositionData instances are equal
        /// </summary>
        /// <param name="input">Instance of PositionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SymbolExchange == input.SymbolExchange ||
                    (this.SymbolExchange != null &&
                    this.SymbolExchange.Equals(input.SymbolExchange))
                ) && 
                (
                    this.SymbolCoinapi == input.SymbolCoinapi ||
                    (this.SymbolCoinapi != null &&
                    this.SymbolCoinapi.Equals(input.SymbolCoinapi))
                ) && 
                (
                    this.AvgEntryPrice == input.AvgEntryPrice ||
                    (this.AvgEntryPrice != null &&
                    this.AvgEntryPrice.Equals(input.AvgEntryPrice))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.IsBuy == input.IsBuy ||
                    (this.IsBuy != null &&
                    this.IsBuy.Equals(input.IsBuy))
                ) && 
                (
                    this.UnrealisedPnL == input.UnrealisedPnL ||
                    (this.UnrealisedPnL != null &&
                    this.UnrealisedPnL.Equals(input.UnrealisedPnL))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.CrossMargin == input.CrossMargin ||
                    (this.CrossMargin != null &&
                    this.CrossMargin.Equals(input.CrossMargin))
                ) && 
                (
                    this.LiquidationPrice == input.LiquidationPrice ||
                    (this.LiquidationPrice != null &&
                    this.LiquidationPrice.Equals(input.LiquidationPrice))
                ) && 
                (
                    this.RawData == input.RawData ||
                    (this.RawData != null &&
                    this.RawData.Equals(input.RawData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SymbolExchange != null)
                    hashCode = hashCode * 59 + this.SymbolExchange.GetHashCode();
                if (this.SymbolCoinapi != null)
                    hashCode = hashCode * 59 + this.SymbolCoinapi.GetHashCode();
                if (this.AvgEntryPrice != null)
                    hashCode = hashCode * 59 + this.AvgEntryPrice.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.IsBuy != null)
                    hashCode = hashCode * 59 + this.IsBuy.GetHashCode();
                if (this.UnrealisedPnL != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnL.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.CrossMargin != null)
                    hashCode = hashCode * 59 + this.CrossMargin.GetHashCode();
                if (this.LiquidationPrice != null)
                    hashCode = hashCode * 59 + this.LiquidationPrice.GetHashCode();
                if (this.RawData != null)
                    hashCode = hashCode * 59 + this.RawData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
