/* 
 * OMS - REST API
 *
 * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. ###Lifecycle Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. ###Lifecycle 2 Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackhama. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CoinAPI.OMS.REST.V1.Client;
using CoinAPI.OMS.REST.V1.Model;

namespace CoinAPI.OMS.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>MessagesOk</returns>
        MessagesOk V1OrdersCancelAllPost (CancelAllOrder cancelAllOrder);

        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>ApiResponse of MessagesOk</returns>
        ApiResponse<MessagesOk> V1OrdersCancelAllPostWithHttpInfo (CancelAllOrder cancelAllOrder);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>OrderLive</returns>
        OrderLive V1OrdersCancelPost (CancelOrder cancelOrder);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        ApiResponse<OrderLive> V1OrdersCancelPostWithHttpInfo (CancelOrder cancelOrder);
        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> V1OrdersGet (string exchangeId = default(string));

        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> V1OrdersGetWithHttpInfo (string exchangeId = default(string));
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>OrderLive</returns>
        OrderLive V1OrdersPost (NewOrder newOrder);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        ApiResponse<OrderLive> V1OrdersPostWithHttpInfo (NewOrder newOrder);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of MessagesOk</returns>
        System.Threading.Tasks.Task<MessagesOk> V1OrdersCancelAllPostAsync (CancelAllOrder cancelAllOrder);

        /// <summary>
        /// Cancel all order
        /// </summary>
        /// <remarks>
        /// Cancel all existing order.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of ApiResponse (MessagesOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesOk>> V1OrdersCancelAllPostAsyncWithHttpInfo (CancelAllOrder cancelAllOrder);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of OrderLive</returns>
        System.Threading.Tasks.Task<OrderLive> V1OrdersCancelPostAsync (CancelOrder cancelOrder);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersCancelPostAsyncWithHttpInfo (CancelOrder cancelOrder);
        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> V1OrdersGetAsync (string exchangeId = default(string));

        /// <summary>
        /// Get orders
        /// </summary>
        /// <remarks>
        /// List your current open orders.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> V1OrdersGetAsyncWithHttpInfo (string exchangeId = default(string));
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of OrderLive</returns>
        System.Threading.Tasks.Task<OrderLive> V1OrdersPostAsync (NewOrder newOrder);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersPostAsyncWithHttpInfo (NewOrder newOrder);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private CoinAPI.OMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = new CoinAPI.OMS.REST.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrdersApi()
        {
            this.Configuration = CoinAPI.OMS.REST.V1.Client.Configuration.Default;

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(CoinAPI.OMS.REST.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CoinAPI.OMS.REST.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.OMS.REST.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.OMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>MessagesOk</returns>
        public MessagesOk V1OrdersCancelAllPost (CancelAllOrder cancelAllOrder)
        {
             ApiResponse<MessagesOk> localVarResponse = V1OrdersCancelAllPostWithHttpInfo(cancelAllOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>ApiResponse of MessagesOk</returns>
        public ApiResponse<MessagesOk> V1OrdersCancelAllPostWithHttpInfo (CancelAllOrder cancelAllOrder)
        {
            // verify the required parameter 'cancelAllOrder' is set
            if (cancelAllOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelAllOrder' when calling OrdersApi->V1OrdersCancelAllPost");

            var localVarPath = "/v1/orders/cancel/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancelAllOrder != null && cancelAllOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelAllOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelAllOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagesOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesOk)));
        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of MessagesOk</returns>
        public async System.Threading.Tasks.Task<MessagesOk> V1OrdersCancelAllPostAsync (CancelAllOrder cancelAllOrder)
        {
             ApiResponse<MessagesOk> localVarResponse = await V1OrdersCancelAllPostAsyncWithHttpInfo(cancelAllOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all order Cancel all existing order.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAllOrder"></param>
        /// <returns>Task of ApiResponse (MessagesOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesOk>> V1OrdersCancelAllPostAsyncWithHttpInfo (CancelAllOrder cancelAllOrder)
        {
            // verify the required parameter 'cancelAllOrder' is set
            if (cancelAllOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelAllOrder' when calling OrdersApi->V1OrdersCancelAllPost");

            var localVarPath = "/v1/orders/cancel/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancelAllOrder != null && cancelAllOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelAllOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelAllOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagesOk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesOk)));
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>OrderLive</returns>
        public OrderLive V1OrdersCancelPost (CancelOrder cancelOrder)
        {
             ApiResponse<OrderLive> localVarResponse = V1OrdersCancelPostWithHttpInfo(cancelOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        public ApiResponse<OrderLive> V1OrdersCancelPostWithHttpInfo (CancelOrder cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelOrder' when calling OrdersApi->V1OrdersCancelPost");

            var localVarPath = "/v1/orders/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancelOrder != null && cancelOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLive)));
        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of OrderLive</returns>
        public async System.Threading.Tasks.Task<OrderLive> V1OrdersCancelPostAsync (CancelOrder cancelOrder)
        {
             ApiResponse<OrderLive> localVarResponse = await V1OrdersCancelPostAsyncWithHttpInfo(cancelOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel order Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersCancelPostAsyncWithHttpInfo (CancelOrder cancelOrder)
        {
            // verify the required parameter 'cancelOrder' is set
            if (cancelOrder == null)
                throw new ApiException(400, "Missing required parameter 'cancelOrder' when calling OrdersApi->V1OrdersCancelPost");

            var localVarPath = "/v1/orders/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancelOrder != null && cancelOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLive)));
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> V1OrdersGet (string exchangeId = default(string))
        {
             ApiResponse<List<Order>> localVarResponse = V1OrdersGetWithHttpInfo(exchangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse<List<Order>> V1OrdersGetWithHttpInfo (string exchangeId = default(string))
        {

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange_id", exchangeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> V1OrdersGetAsync (string exchangeId = default(string))
        {
             ApiResponse<List<Order>> localVarResponse = await V1OrdersGetAsyncWithHttpInfo(exchangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get orders List your current open orders.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> V1OrdersGetAsyncWithHttpInfo (string exchangeId = default(string))
        {

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange_id", exchangeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>OrderLive</returns>
        public OrderLive V1OrdersPost (NewOrder newOrder)
        {
             ApiResponse<OrderLive> localVarResponse = V1OrdersPostWithHttpInfo(newOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>ApiResponse of OrderLive</returns>
        public ApiResponse<OrderLive> V1OrdersPostWithHttpInfo (NewOrder newOrder)
        {
            // verify the required parameter 'newOrder' is set
            if (newOrder == null)
                throw new ApiException(400, "Missing required parameter 'newOrder' when calling OrdersApi->V1OrdersPost");

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newOrder != null && newOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLive)));
        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of OrderLive</returns>
        public async System.Threading.Tasks.Task<OrderLive> V1OrdersPostAsync (NewOrder newOrder)
        {
             ApiResponse<OrderLive> localVarResponse = await V1OrdersPostAsyncWithHttpInfo(newOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new order You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrder"></param>
        /// <returns>Task of ApiResponse (OrderLive)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderLive>> V1OrdersPostAsyncWithHttpInfo (NewOrder newOrder)
        {
            // verify the required parameter 'newOrder' is set
            if (newOrder == null)
                throw new ApiException(400, "Missing required parameter 'newOrder' when calling OrdersApi->V1OrdersPost");

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newOrder != null && newOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOrder; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderLive>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderLive) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderLive)));
        }

    }
}
