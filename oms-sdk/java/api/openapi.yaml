openapi: 3.0.0
info:
  contact:
    name: MARMOT SOLUTIONS LTD
    url: https://www.coinapi.io
  description: |
    Lorem2 Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
    ###Lifecycle
    Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.
    The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.
    ###Lifecycle 2
    Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.
    The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackhama.
  license:
    name: Apache 2.0
    url: https://github.com/OAI/OpenAPI-Specification/blob/master/https://www.apache.org/licenses/LICENSE-2.0.html
  title: OMS - REST API
  version: v1
servers:
- url: http://localhost:3001
tags:
- description: |
    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
    ###Lifecycle
    Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.
    The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.
  name: Orders
- name: Balances
- name: Positions
paths:
  /v1/orders:
    get:
      description: List your current open orders.
      parameters:
      - description: Exchange name
        explode: true
        in: query
        name: exchange_id
        required: false
        schema:
          example: KRAKEN
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
          description: Ok
      summary: Get orders
      tags:
      - Orders
      x-accepts: application/json
    post:
      description: 'You can place two types of orders: limit and market. Orders can
        only be placed if your account has sufficient funds.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newOrder'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderLive'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createOrder400'
          description: Validation errors
        "490":
          content:
            appliction/json:
              schema:
                $ref: '#/components/schemas/messages'
          description: Exchange not registered
      summary: Create new order
      tags:
      - Orders
      x-contentType: application/json
      x-accepts: application/json
  /v1/orders/cancel:
    post:
      description: Cancel an existing order, can be used to cancel margin, exchange,
        and derivative orders. You can cancel the order by the internal order ID or
        exchange order ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cancelOrder'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderLive'
          description: Canceled order
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createOrder400'
          description: Validation errors
        "490":
          content:
            appliction/json:
              schema:
                $ref: '#/components/schemas/messages'
          description: Exchange not registered
      summary: Cancel order
      tags:
      - Orders
      x-contentType: application/json
      x-accepts: application/json
  /v1/orders/cancel/all:
    post:
      description: Cancel all existing order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cancelAllOrder'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesOk'
          description: Result
      summary: Cancel all order
      tags:
      - Orders
      x-contentType: application/json
      x-accepts: application/json
  /v1/balances:
    get:
      description: Returns all of your balances, including available balance.
      parameters:
      - description: Exchange name
        explode: true
        in: query
        name: exchange_id
        required: false
        schema:
          example: KRAKEN
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/balances'
          description: Result
      summary: Get balances
      tags:
      - Balances
      x-accepts: application/json
  /v1/positions:
    get:
      description: Returns all of your positions.
      parameters:
      - description: Exchange name
        explode: true
        in: query
        name: exchange_id
        required: false
        schema:
          example: KRAKEN
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/positions'
          description: Result
      summary: Get positions
      tags:
      - Positions
      x-accepts: application/json
components:
  schemas:
    orders:
      items:
        $ref: '#/components/schemas/order'
      type: array
    order:
      example:
        exchange_name: KRAKEN
        data:
        - amount_open: 0.22
          time_order:
          - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
            - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
            - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          error_message: '{"result":"error","reason":"InsufficientFunds","message":"Failed
            to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
            0.22 BTC due to insufficient funds"}'
          client_order_id_format_exchange: f81211e2-27c4-b86a-8143-01088ba9222c
          amount_filled: 0.0
          client_order_id: KPP-222389382-AQ
          side: BUY
          expire_time: ""
          exec_inst:
          - MAKER_OR_CANCEL
          - MAKER_OR_CANCEL
          exchange_order_id: 90832ASASAS89789-1112
          symbol_coinapi: KRAKEN_SPOT_BTC_USD
          exchange_id: KRAKEN
          price: 0.0783
          amount_order: 0.045
          id: KPP-222389382-AQ
          order_type: LIMIT
          symbol_exchange: BTCUSD
        - amount_open: 0.22
          time_order:
          - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
            - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
            - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          error_message: '{"result":"error","reason":"InsufficientFunds","message":"Failed
            to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
            0.22 BTC due to insufficient funds"}'
          client_order_id_format_exchange: f81211e2-27c4-b86a-8143-01088ba9222c
          amount_filled: 0.0
          client_order_id: KPP-222389382-AQ
          side: BUY
          expire_time: ""
          exec_inst:
          - MAKER_OR_CANCEL
          - MAKER_OR_CANCEL
          exchange_order_id: 90832ASASAS89789-1112
          symbol_coinapi: KRAKEN_SPOT_BTC_USD
          exchange_id: KRAKEN
          price: 0.0783
          amount_order: 0.045
          id: KPP-222389382-AQ
          order_type: LIMIT
          symbol_exchange: BTCUSD
        type: snapshotOrders
      properties:
        type:
          description: "null"
          example: snapshotOrders
          type: string
        exchange_name:
          description: Exchange name
          example: KRAKEN
          type: string
        data:
          description: Orders array
          items:
            $ref: '#/components/schemas/order_data'
          type: array
      type: object
    newOrder:
      properties:
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        client_order_id:
          description: Client unique identifier for the trade.
          example: KPP-222389382-AQ
          type: string
        symbol_exchange:
          description: The symbol of the order.
          example: BTCUSD
          type: string
        symbol_coinapi:
          description: The CoinAPI symbol of the order.
          example: KRAKEN_SPOT_BTC_USD
          type: string
        amount_order:
          description: Quoted decimal amount to purchase.
          example: 0.045
          type: number
        price:
          description: Quoted decimal amount to spend per unit.
          example: 0.0783
          type: number
        side:
          description: Buy or Sell
          enum:
          - BUY
          - SELL
          example: BUY
          type: string
        order_type:
          description: The order type.
          enum:
          - LIMIT
          example: LIMIT
          type: string
        time_in_force:
          $ref: '#/components/schemas/timeInForce'
        expire_time:
          description: Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE,
            GOOD_TILL_TIME_OMS
          type: date
        exec_inst:
          description: |
            TODO: description exec inst

            | Parameter | Description |
            |-----------|--------|
            | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |
            ##### Exec inst options

            | Exchange | MAKER_OR_CANCEL |
            | --- | --- |
            | BINANCE | X |
            | BITFINEX | X |
            | BITMEX | X |
            | BLOCKCHAINEXCHANGE | X |
            | BITSTAMP |  |
            | COINBASE | X |
            | GEMINI | X |
            | KRAKEN | X |
            | POLONIEX | X |
            | HITBTC |  |
            | KRAKENFTS | X |
          items:
            enum:
            - MAKER_OR_CANCEL
            type: string
          type: array
      type: object
    orderLive:
      example:
        amount_open: 0.22
        time_order:
        - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
        - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
        error_message: '{"result":"error","reason":"InsufficientFunds","message":"Failed
          to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
          0.22 BTC due to insufficient funds"}'
        client_order_id_format_exchange: f81211e2-27c4-b86a-8143-01088ba9222c
        amount_filled: 0.0
        client_order_id: KPP-222389382-AQ
        side: BUY
        expire_time: ""
        exec_inst:
        - MAKER_OR_CANCEL
        - MAKER_OR_CANCEL
        type: updateOrder
        exchange_order_id: 90832ASASAS89789-1112
        symbol_coinapi: KRAKEN_SPOT_BTC_USD
        exchange_id: KRAKEN
        price: 0.0783
        amount_order: 0.045
        id: KPP-222389382-AQ
        order_type: LIMIT
        symbol_exchange: BTCUSD
      properties:
        type:
          description: Result type name
          example: updateOrder
          type: string
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        id:
          description: Client unique identifier for the trade.
          example: KPP-222389382-AQ
          type: string
        client_order_id_format_exchange:
          description: Hash client id
          example: f81211e2-27c4-b86a-8143-01088ba9222c
          type: string
        exchange_order_id:
          description: Exchange order id
          example: 90832ASASAS89789-1112
          type: string
        amount_open:
          description: Amount open
          example: 0.22
          type: number
        amount_filled:
          description: Amount filled
          example: 0.0
          type: number
        status:
          $ref: '#/components/schemas/orderStatus'
        time_order:
          description: History of order status changes
          items:
            items:
              example: '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
              type: string
            type: array
          type: array
        error_message:
          description: Error message
          example: '{"result":"error","reason":"InsufficientFunds","message":"Failed
            to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
            0.22 BTC due to insufficient funds"}'
          type: string
        client_order_id:
          description: Client unique identifier for the trade.
          example: KPP-222389382-AQ
          type: string
        symbol_exchange:
          description: The symbol of the order.
          example: BTCUSD
          type: string
        symbol_coinapi:
          description: The CoinAPI symbol of the order.
          example: KRAKEN_SPOT_BTC_USD
          type: string
        amount_order:
          description: Quoted decimal amount to purchase.
          example: 0.045
          type: number
        price:
          description: Quoted decimal amount to spend per unit.
          example: 0.0783
          type: number
        side:
          description: Buy or Sell
          enum:
          - BUY
          - SELL
          example: BUY
          type: string
        order_type:
          description: The order type.
          enum:
          - LIMIT
          example: LIMIT
          type: string
        time_in_force:
          $ref: '#/components/schemas/timeInForce'
        expire_time:
          description: Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE,
            GOOD_TILL_TIME_OMS
          type: date
        exec_inst:
          description: |
            TODO: description exec inst

            | Parameter | Description |
            |-----------|--------|
            | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |
            ##### Exec inst options

            | Exchange | MAKER_OR_CANCEL |
            | --- | --- |
            | BINANCE | X |
            | BITFINEX | X |
            | BITMEX | X |
            | BLOCKCHAINEXCHANGE | X |
            | BITSTAMP |  |
            | COINBASE | X |
            | GEMINI | X |
            | KRAKEN | X |
            | POLONIEX | X |
            | HITBTC |  |
            | KRAKENFTS | X |
          items:
            enum:
            - MAKER_OR_CANCEL
            type: string
          type: array
      type: object
    cancelOrder:
      properties:
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        exchange_order_id:
          description: Order Id
          example: d8574207d9e3b16a4a5511753eeef1751
          type: string
        client_order_id:
          description: Client order Id
          example: A12345
          type: string
      type: object
    cancelAllOrder:
      properties:
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
      type: object
    balances:
      items:
        $ref: '#/components/schemas/balance'
      type: array
    balance:
      example:
        exchange_name: KRAKEN
        data:
        - symbol_coinapi: BTC
          update_origin: EXCHANGE
          balance: 0.00134444
          available: 0.00134444
          id: BTC
          locked: 0.0
          symbol_exchange: BTC
        - symbol_coinapi: BTC
          update_origin: EXCHANGE
          balance: 0.00134444
          available: 0.00134444
          id: BTC
          locked: 0.0
          symbol_exchange: BTC
        type: snapshotBalances
      properties:
        type:
          description: Result type.
          example: snapshotBalances
          type: string
        exchange_name:
          description: Exchange name.
          example: KRAKEN
          type: string
        data:
          items:
            $ref: '#/components/schemas/balance_data'
          type: array
      type: object
    positions:
      items:
        $ref: '#/components/schemas/position'
      type: array
    position:
      example:
        exchange_name: KRAKEN
        data:
        - liquidation_price: 0.072323
          symbol_coinapi: BTC
          leverage: 0.0
          unrealised_pn_l: 0.0
          quantity: 0.00134444
          cross_margin: true
          id: 2873jkjhgdsd78ii
          raw_data: xyz
          symbol_exchange: BTC
          avg_entry_price: 0.00134444
          is_buy: true
        - liquidation_price: 0.072323
          symbol_coinapi: BTC
          leverage: 0.0
          unrealised_pn_l: 0.0
          quantity: 0.00134444
          cross_margin: true
          id: 2873jkjhgdsd78ii
          raw_data: xyz
          symbol_exchange: BTC
          avg_entry_price: 0.00134444
          is_buy: true
        type: snapshotPositions
      properties:
        type:
          description: Result type.
          example: snapshotPositions
          type: string
        exchange_name:
          description: Name of exchange.
          example: KRAKEN
          type: string
        data:
          items:
            $ref: '#/components/schemas/position_data'
          type: array
      type: object
    timeInForce:
      description: |
        Time in force is a special instruction used when placing a trade to indicate how long an order will remain active before it is executed or expires. These options are especially important for active traders and allow them to be more specific about the time parameters.

        | Parameter | Description |
        |-----------|--------|
        | `GOOD_TILL_CANCEL` | A Good-Til-Cancelled (GTC) order is an order to buy or sell a stock that lasts until the order is completed or canceled. Brokerage firms typically limit the length of time an investor can leave a GTC order open.  This time frame may vary from broker to broker.  Investors should contact their brokerage firms to determine what time limit would apply to GTC orders. |
        | `GOOD_TILL_TIME_EXCHANGE` | The GTTE (Good-til-Date/Time) time in force lets you select an expiration date and time up until which an order will continue to work. Setting this attribute requires both a time in force selection of GTD, a date entry in the Expiration Date field, and a time entry in the Expiration Time field if that level of detail is required. Note that if you only enter a good-till date, the unfilled order will cancel at the close of the market on the specified day. |
        | `GOOD_TILL_TIME_OMS` | The GTT (GTTO) supported by OMS. |
        | `FILL_OR_KILL` | Fill or kill (FOK) is a type of time-in-force designation used in securities trading that instructs a brokerage to execute a transaction immediately and completely or not at all. This type of order is most often used by active traders and is usually for a large quantity of stock. The order must be filled in its entirety or canceled (killed). |
        | `IMMEDIATE_OR_CANCEL` | An immediate or cancel order (IOC) is an order to buy or sell a security that executes all or part immediately and cancels any unfilled portion of the order. An IOC order is one of several "duration orders" that investors can use to specify how long the order remains active in the market and under what conditions the order is canceled. Other commonly used duration order types include fill or kill (FOK), all or none (AON) and good ‘till canceled (GTC). Most online trading platforms allow IOC orders to be placed manually or programmed into automated trading strategies. |
        | `AUCTION_ONLY` | This order will be added to the auction-only (AO) book for the next auction for this symbol. |
        | `INDICATION_OF_INTEREST` | An indication of interest (IOI) is an underwriting expression showing a conditional, non-binding interest in buying a security that is currently in registration—awaiting approval by the Securities and Exchange Commission (SEC). The investor's broker is required to provide the investor with a preliminary prospectus. However, IOIs in the mergers and acquisitions world has similar intent but is done differently. |

        ##### Time in force options

        | Exchange | GTC | GTTE | GTTO | FOK | IOC | AO | IOI |
        | --- | --- | --- | ---- | --- | --- | --- | --- |
        | BINANCE | X | X |  | X | X |  |  |
        | BITFINEX | X | X |  | X | X |  |  |
        | BITMEX | X | X |  |  | X |  |  |
        | BLOCKCHAINEXCHANGE | X | X |  |  | X |  |  |
        | BITSTAMP | X | X |  |  | X |  |  |
        | COINBASE | X |  | X | X | X |  |  |
        | GEMINI | X | X |  | X | X | X | X |
        | KRAKEN | X |  | X |  |  |  |  |
        | POLONIEX | X | X |  | X | X |  |  |
        | HITBTC | X | X |  | X | X |  |  |
        | KRAKENFTS | X | X |  |  | X |  |  |
      enum:
      - GOOD_TILL_CANCEL
      - GOOD_TILL_TIME_EXCHANGE
      - GOOD_TILL_TIME_OMS
      - FILL_OR_KILL
      - IMMEDIATE_OR_CANCEL
      - AUCTION_ONLY
      - INDICATION_OF_INTEREST
      type: string
    execInst:
      description: |
        TODO: description exec inst

        | Parameter | Description |
        |-----------|--------|
        | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |
        ##### Exec inst options

        | Exchange | MAKER_OR_CANCEL |
        | --- | --- |
        | BINANCE | X |
        | BITFINEX | X |
        | BITMEX | X |
        | BLOCKCHAINEXCHANGE | X |
        | BITSTAMP |  |
        | COINBASE | X |
        | GEMINI | X |
        | KRAKEN | X |
        | POLONIEX | X |
        | HITBTC |  |
        | KRAKENFTS | X |
      items:
        enum:
        - MAKER_OR_CANCEL
        type: string
      type: array
    createOrder400:
      properties:
        type:
          example: https://tools.ietf.org/html/rfc7231#section-6.5.1
          type: string
        title:
          example: One or more validation errors occurred.
          type: string
        status:
          example: 400
          type: number
        traceId:
          example: d200e8b5-4271a5461ce5342f
          type: string
        errors:
          type: string
      title: Create order validation error (response)
      type: object
    messagesInfo:
      properties:
        type:
          description: Type of message
          example: error
          type: string
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        error_message:
          description: Error message
          example: Exchange not registered
          type: string
      title: Message info
      type: object
    messagesOk:
      example:
        exchange_id: KRAKEN
        type: message
        message: Ok
      properties:
        type:
          description: Type of message
          example: message
          type: string
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        message:
          description: Message
          example: Ok
          type: string
      title: Message ok
      type: object
    messages:
      properties:
        type:
          description: Type of message
          example: message
          type: string
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        message:
          description: Message
          example: Ok
          type: string
      title: Message
      type: object
    orderStatus:
      description: "Order statuses\n##### Status description\n\n| Name | Possible\
        \ transitions to | Status description \n| --- | --- | --- |\n| RECEIVED |\
        \ REJECTED, ROUTING | We received an order and will send it to the exchange\
        \ immedaitely\n| ROUTING | ROUTED | We are in the process of sending order\
        \ to the exchange\n| ROUTED | REJECTED, NEW, PARTIALLY_FILLED, FILLED, CANCELED\
        \ | Order was sent to the exchange from our side, but it's not yet active\
        \ in order book\n| NEW | PARTIALLY_FILLED, FILLED, PENDING_CANCEL, CANCELED\
        \ | Order is active in the order book and it's untouched\n| PENDING_CANCEL\
        \ | NEW, PARTIALLY_FILLED, FILLED, CANCELED | We received order cancel request\
        \ and relayed it succesfully to the exchange. \n| PARTIALLY_FILLED | FILLED,\
        \ PENDING_CANCEL, CANCELED | Order is active in the order book and it's partially\
        \ filled\n| FILLED | | Order is no longer active in the order book as was\
        \ completely filled \n| CANCELED | | Order is no longer active in the order\
        \ book as was canceled\n| REJECTED | | Order was rejected by OMS or exchange.\n\
        ##### Status transitions\n\n| Source Status | Destination status | Description\n\
        | --- | --- | --- |\n| | RECEIVED | OMS received new order from you\n| | NEW\
        \ | OMS received unseen new order from the exchange (order was relayed to\
        \ the exchnage outside the OMS)\n| | PARTIALLY_FILLED | OMS received unseen\
        \ partially filled order from the exchange (order was relayed to the exchnage\
        \ outside the OMS)\n| RECEIVED | REJECTED | OMS rejected your order\n| RECEIVED\
        \ | ROUTING | We started relaying order to the exchange\n| ROUTING | ROUTED\
        \ | Order was relayed to the exchange and we are waiting to be active in the\
        \ order book\n| ROUTED | REJECTED | Exchange rejected your order\n| ROUTED\
        \ | NEW | Exchange accepted your passive order into order book\n| ROUTED |\
        \ PARTIALLY_FILLED | Exchange actively filled part of your order and the remaining\
        \ was accepted into order book\n| ROUTED | FILLED | Exchange actively filled\
        \ your order in whole.\n| ROUTED | CANCELED | Exchange canceled your order\
        \ before accepting it to the order book.\n| NEW | PARTIALLY_FILLED | Part\
        \ of your order was filled.\n| NEW | FILLED | Whole order was filled.\n| NEW\
        \ | PENDING_CANCEL | We received cancel request and successfully relayed it\
        \ to the exchange.\n| NEW | CANCELED | Your order was canceled.\n| PARTIALLY_FILLED\
        \ | FILLED | Remaining active part of the order was filled succesfully.\n\
        | PARTIALLY_FILLED | PENDING_CANCEL | We received cancel request and successfully\
        \ relayed it to the exchange.\n| PARTIALLY_FILLED | CANCELED | Your order\
        \ was canceled.\n| PENDING_CANCEL | NEW | Exchange responded to the cancelation\
        \ message that your order is fully active in the order book.\n| PENDING_CANCEL\
        \ | PARTIALLY_FILLED | Your order was filled partially after we relayed cancelation\
        \ message to the exchange.\n| PENDING_CANCEL | FILLED | Your order was completely\
        \ filled before the cancel was executed by the exchange.\n| PENDING_CANCEL\
        \ | CANCELED | Your order was canceled.\n"
      enum:
      - RECEIVED
      - ROUTING
      - ROUTED
      - NEW
      - PENDING_CANCEL
      - PARTIALLY_FILLED
      - FILLED
      - CANCELED
      - REJECTED
      type: string
    order_data:
      example:
        amount_open: 0.22
        time_order:
        - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
        - - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
          - '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
        error_message: '{"result":"error","reason":"InsufficientFunds","message":"Failed
          to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
          0.22 BTC due to insufficient funds"}'
        client_order_id_format_exchange: f81211e2-27c4-b86a-8143-01088ba9222c
        amount_filled: 0.0
        client_order_id: KPP-222389382-AQ
        side: BUY
        expire_time: ""
        exec_inst:
        - MAKER_OR_CANCEL
        - MAKER_OR_CANCEL
        exchange_order_id: 90832ASASAS89789-1112
        symbol_coinapi: KRAKEN_SPOT_BTC_USD
        exchange_id: KRAKEN
        price: 0.0783
        amount_order: 0.045
        id: KPP-222389382-AQ
        order_type: LIMIT
        symbol_exchange: BTCUSD
      properties:
        exchange_id:
          description: Exchange name
          example: KRAKEN
          type: string
        id:
          description: Client unique identifier for the trade.
          example: KPP-222389382-AQ
          type: string
        client_order_id_format_exchange:
          description: Hash client id
          example: f81211e2-27c4-b86a-8143-01088ba9222c
          type: string
        exchange_order_id:
          description: Exchange order id
          example: 90832ASASAS89789-1112
          type: string
        amount_open:
          description: Amount open
          example: 0.22
          type: number
        amount_filled:
          description: Amount filled
          example: 0.0
          type: number
        status:
          $ref: '#/components/schemas/orderStatus'
        time_order:
          description: History of order status changes
          items:
            items:
              example: '["RECEIVED","2020-05-27T11:16:20.1677709Z"]'
              type: string
            type: array
          type: array
        error_message:
          description: Error message
          example: '{"result":"error","reason":"InsufficientFunds","message":"Failed
            to place buy order on symbol ''BTCUSD'' for price $7,000.00 and quantity
            0.22 BTC due to insufficient funds"}'
          type: string
        client_order_id:
          description: Client unique identifier for the trade.
          example: KPP-222389382-AQ
          type: string
        symbol_exchange:
          description: The symbol of the order.
          example: BTCUSD
          type: string
        symbol_coinapi:
          description: The CoinAPI symbol of the order.
          example: KRAKEN_SPOT_BTC_USD
          type: string
        amount_order:
          description: Quoted decimal amount to purchase.
          example: 0.045
          type: number
        price:
          description: Quoted decimal amount to spend per unit.
          example: 0.0783
          type: number
        side:
          description: Buy or Sell
          enum:
          - BUY
          - SELL
          example: BUY
          type: string
        order_type:
          description: The order type.
          enum:
          - LIMIT
          example: LIMIT
          type: string
        time_in_force:
          $ref: '#/components/schemas/timeInForce'
        expire_time:
          description: Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE,
            GOOD_TILL_TIME_OMS
          type: date
        exec_inst:
          description: |
            TODO: description exec inst

            | Parameter | Description |
            |-----------|--------|
            | `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |
            ##### Exec inst options

            | Exchange | MAKER_OR_CANCEL |
            | --- | --- |
            | BINANCE | X |
            | BITFINEX | X |
            | BITMEX | X |
            | BLOCKCHAINEXCHANGE | X |
            | BITSTAMP |  |
            | COINBASE | X |
            | GEMINI | X |
            | KRAKEN | X |
            | POLONIEX | X |
            | HITBTC |  |
            | KRAKENFTS | X |
          items:
            enum:
            - MAKER_OR_CANCEL
            type: string
          type: array
    balance_data:
      example:
        symbol_coinapi: BTC
        update_origin: EXCHANGE
        balance: 0.00134444
        available: 0.00134444
        id: BTC
        locked: 0.0
        symbol_exchange: BTC
      properties:
        id:
          description: symbol_exchange
          example: BTC
          type: string
        symbol_exchange:
          description: Currency code.
          example: BTC
          type: string
        symbol_coinapi:
          description: CoinAPI currency code.
          example: BTC
          type: string
        balance:
          description: The current balance.
          example: 0.00134444
          format: float
          type: number
        available:
          description: The amount that is available to trade.
          example: 0.00134444
          format: float
          type: number
        locked:
          description: Blocked funds.
          example: 0.0
          format: float
          type: number
        update_origin:
          description: |
            Source of last modification.
          enum:
          - INITIALIZATION
          - BALANCE_MANAGER
          - EXCHANGE
          example: EXCHANGE
          type: string
    position_data:
      example:
        liquidation_price: 0.072323
        symbol_coinapi: BTC
        leverage: 0.0
        unrealised_pn_l: 0.0
        quantity: 0.00134444
        cross_margin: true
        id: 2873jkjhgdsd78ii
        raw_data: xyz
        symbol_exchange: BTC
        avg_entry_price: 0.00134444
        is_buy: true
      properties:
        id:
          description: Unique position ID
          example: 2873jkjhgdsd78ii
          type: string
        symbol_exchange:
          description: The contract for this position.
          example: BTC
          type: string
        symbol_coinapi:
          description: The coinapi contract for this position.
          example: BTC
          type: string
        avg_entry_price:
          example: 0.00134444
          type: number
        quantity:
          description: The current position amount in contracts.
          example: 0.00134444
          type: number
        is_buy:
          example: true
          type: boolean
        unrealised_pn_l:
          description: Unrealised PNL is all the unrealised profit or loss coming
            from your portfolio's open positions.
          example: 0.0
          type: number
        leverage:
          description: 1 / initMarginReq.
          example: 0.0
          type: number
        cross_margin:
          description: True/false depending on whether you set cross margin on this
            position.
          example: true
          type: boolean
        liquidation_price:
          description: Once markPrice reaches this price, this position will be liquidated.
          example: 0.072323
          type: number
        raw_data:
          example: xyz
          type: string

