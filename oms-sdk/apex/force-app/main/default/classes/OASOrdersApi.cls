/*
 * OMS - REST API .
 * OMS Project
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOrdersApi {
    OASClient client;

    public OASOrdersApi(OASClient client) {
        this.client = client;
    }

    public OASOrdersApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Cancel all order
     * Cancel all existing order.
     * @param oaSCancelAllOrder  (required)
     * @return OASMessagesOk
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMessagesOk v1OrdersCancelAllPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCancelAllOrder'), 'oaSCancelAllOrder');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMessagesOk) client.invoke(
            'POST', '/v1/orders/cancel/all',
            (OASCancelAllOrder) params.get('oaSCancelAllOrder'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASMessagesOk.class
        );
    }
    /**
     * Cancel order
     * Cancel an existing order, can be used to cancel margin, exchange, and derivative orders. You can cancel the order by the internal order ID or exchange order ID.
     * @param oaSCancelOrder  (required)
     * @return OASOrderLive
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrderLive v1OrdersCancelPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSCancelOrder'), 'oaSCancelOrder');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrderLive) client.invoke(
            'POST', '/v1/orders/cancel',
            (OASCancelOrder) params.get('oaSCancelOrder'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'appliction/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASOrderLive.class
        );
    }
    /**
     * Get orders
     * List your current open orders.
     * @param exchangeId Exchange name (optional)
     * @return List<OASOrder>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASOrder> v1OrdersGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASOrder>) client.invoke(
            'GET', '/v1/orders', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            List<OASOrder>.class
        );
    }
    /**
     * Create new order
     * You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds.
     * @param oaSNewOrder  (required)
     * @return OASOrderLive
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrderLive v1OrdersPost(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSNewOrder'), 'oaSNewOrder');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrderLive) client.invoke(
            'POST', '/v1/orders',
            (OASNewOrder) params.get('oaSNewOrder'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'appliction/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASOrderLive.class
        );
    }
}
