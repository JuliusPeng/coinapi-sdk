/*
 * OMS - REST API .
 * OMS Project
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASNewOrder
 */
public class OASNewOrder implements OAS.MappedProperties {
    /**
     * Exchange name
     * @return exchangeId
     */
    public String exchangeId { get; set; }

    /**
     * Client unique identifier for the trade.
     * @return clientOrderId
     */
    public String clientOrderId { get; set; }

    /**
     * The symbol of the order.
     * @return symbolExchange
     */
    public String symbolExchange { get; set; }

    /**
     * The CoinAPI symbol of the order.
     * @return symbolCoinapi
     */
    public String symbolCoinapi { get; set; }

    /**
     * Quoted decimal amount to purchase.
     * @return amountOrder
     */
    public Double amountOrder { get; set; }

    /**
     * Quoted decimal amount to spend per unit.
     * @return price
     */
    public Double price { get; set; }

    /**
     * Buy or Sell
     */
    public enum SideEnum {
        BUY,
        SELL
    }

    /**
     * Buy or Sell
     * @return side
     */
    public SideEnum side { get; set; }

    /**
     * The order type.
     */
    public enum OrderTypeEnum {
        LIMIT
    }

    /**
     * The order type.
     * @return orderType
     */
    public OrderTypeEnum orderType { get; set; }

    /**
     * Get timeInForce
     * @return timeInForce
     */
    public OASTimeInForce timeInForce { get; set; }

    /**
     * Required for orders with time_in_force = GOOD_TILL_TIME_EXCHANGE, GOOD_TILL_TIME_OMS
     * @return expireTime
     */
    public Date expireTime { get; set; }

    /**
     * Gets or Sets execInst
     */
    public enum ExecInstEnum {
        MAKER_OR_CANCEL
    }

    /**
     * TODO: description exec inst\n\n| Parameter | Description |\n|-----------|--------|\n| `MAKER_OR_CANCEL` | Rests on the continuous order book at a specified price. If any quantity can be filled immediately, the entire order is canceled. |\n##### Exec inst options\n\n| Exchange | MAKER_OR_CANCEL |\n| --- | --- |\n| BINANCE | X |\n| BITFINEX | X |\n| BITMEX | X |\n| BLOCKCHAINEXCHANGE | X |\n| BITSTAMP |  |\n| COINBASE | X |\n| GEMINI | X |\n| KRAKEN | X |\n| POLONIEX | X |\n| HITBTC |  |\n| KRAKENFTS | X |\n
     * @return execInst
     */
    public List<ExecInstEnum> execInst { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_exchange' => 'symbolExchange',
        'symbol_coinapi' => 'symbolCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASNewOrder() {
        execInst = new List<ExecInstEnum>();
    }

    public static OASNewOrder getExample() {
        OASNewOrder newOrder = new OASNewOrder();
          newOrder.exchangeId = 'KRAKEN';
          newOrder.clientOrderId = 'KPP-222389382-AQ';
          newOrder.symbolExchange = 'BTCUSD';
          newOrder.symbolCoinapi = 'KRAKEN_SPOT_BTC_USD';
          newOrder.amountOrder = 0.045;
          newOrder.price = 0.0783;
          newOrder.side = SideEnum.BUY;
          newOrder.orderType = OrderTypeEnum.LIMIT;
          newOrder.timeInForce = OASTimeInForce.getExample();
          newOrder.expireTime = Date.getExample();
          newOrder.execInst = List<ExecInstEnum>.LIST_EXECINSTENUM_NEW_LIST_STRING_MAKER_OR_CANCEL_;
        return newOrder;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASNewOrder) {           
            OASNewOrder newOrder = (OASNewOrder) obj;
            return this.exchangeId == newOrder.exchangeId
                && this.clientOrderId == newOrder.clientOrderId
                && this.symbolExchange == newOrder.symbolExchange
                && this.symbolCoinapi == newOrder.symbolCoinapi
                && this.amountOrder == newOrder.amountOrder
                && this.price == newOrder.price
                && this.side == newOrder.side
                && this.orderType == newOrder.orderType
                && this.timeInForce == newOrder.timeInForce
                && this.expireTime == newOrder.expireTime
                && this.execInst == newOrder.execInst;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (exchangeId == null ? 0 : System.hashCode(exchangeId));
        hashCode = (17 * hashCode) + (clientOrderId == null ? 0 : System.hashCode(clientOrderId));
        hashCode = (17 * hashCode) + (symbolExchange == null ? 0 : System.hashCode(symbolExchange));
        hashCode = (17 * hashCode) + (symbolCoinapi == null ? 0 : System.hashCode(symbolCoinapi));
        hashCode = (17 * hashCode) + (amountOrder == null ? 0 : System.hashCode(amountOrder));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (side == null ? 0 : System.hashCode(side));
        hashCode = (17 * hashCode) + (orderType == null ? 0 : System.hashCode(orderType));
        hashCode = (17 * hashCode) + (timeInForce == null ? 0 : System.hashCode(timeInForce));
        hashCode = (17 * hashCode) + (expireTime == null ? 0 : System.hashCode(expireTime));
        hashCode = (17 * hashCode) + (execInst == null ? 0 : System.hashCode(execInst));
        return hashCode;
    }
}

