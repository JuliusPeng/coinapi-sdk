/**
 * OMS - REST API .
 * OMS Project
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderStatus::OrderStatus()
{
}

OrderStatus::~OrderStatus()
{
}

void OrderStatus::validate()
{
    // TODO: implement validation
}

web::json::value OrderStatus::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eOrderStatus::OrderStatus_RECEIVED) val = web::json::value::string(U("RECEIVED"));
    if (m_value == eOrderStatus::OrderStatus_ROUTING) val = web::json::value::string(U("ROUTING"));
    if (m_value == eOrderStatus::OrderStatus_ROUTED) val = web::json::value::string(U("ROUTED"));
    if (m_value == eOrderStatus::OrderStatus_NEW) val = web::json::value::string(U("NEW"));
    if (m_value == eOrderStatus::OrderStatus_PENDING_CANCEL) val = web::json::value::string(U("PENDING_CANCEL"));
    if (m_value == eOrderStatus::OrderStatus_PARTIALLY_FILLED) val = web::json::value::string(U("PARTIALLY_FILLED"));
    if (m_value == eOrderStatus::OrderStatus_FILLED) val = web::json::value::string(U("FILLED"));
    if (m_value == eOrderStatus::OrderStatus_CANCELED) val = web::json::value::string(U("CANCELED"));
    if (m_value == eOrderStatus::OrderStatus_REJECTED) val = web::json::value::string(U("REJECTED"));

    return val;
}

bool OrderStatus::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("RECEIVED")) m_value = eOrderStatus::OrderStatus_RECEIVED;
    if (s == utility::conversions::to_string_t("ROUTING")) m_value = eOrderStatus::OrderStatus_ROUTING;
    if (s == utility::conversions::to_string_t("ROUTED")) m_value = eOrderStatus::OrderStatus_ROUTED;
    if (s == utility::conversions::to_string_t("NEW")) m_value = eOrderStatus::OrderStatus_NEW;
    if (s == utility::conversions::to_string_t("PENDING_CANCEL")) m_value = eOrderStatus::OrderStatus_PENDING_CANCEL;
    if (s == utility::conversions::to_string_t("PARTIALLY_FILLED")) m_value = eOrderStatus::OrderStatus_PARTIALLY_FILLED;
    if (s == utility::conversions::to_string_t("FILLED")) m_value = eOrderStatus::OrderStatus_FILLED;
    if (s == utility::conversions::to_string_t("CANCELED")) m_value = eOrderStatus::OrderStatus_CANCELED;
    if (s == utility::conversions::to_string_t("REJECTED")) m_value = eOrderStatus::OrderStatus_REJECTED;
    return true;
}

void OrderStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eOrderStatus::OrderStatus_RECEIVED) s = utility::conversions::to_string_t("RECEIVED");
    if (m_value == eOrderStatus::OrderStatus_ROUTING) s = utility::conversions::to_string_t("ROUTING");
    if (m_value == eOrderStatus::OrderStatus_ROUTED) s = utility::conversions::to_string_t("ROUTED");
    if (m_value == eOrderStatus::OrderStatus_NEW) s = utility::conversions::to_string_t("NEW");
    if (m_value == eOrderStatus::OrderStatus_PENDING_CANCEL) s = utility::conversions::to_string_t("PENDING_CANCEL");
    if (m_value == eOrderStatus::OrderStatus_PARTIALLY_FILLED) s = utility::conversions::to_string_t("PARTIALLY_FILLED");
    if (m_value == eOrderStatus::OrderStatus_FILLED) s = utility::conversions::to_string_t("FILLED");
    if (m_value == eOrderStatus::OrderStatus_CANCELED) s = utility::conversions::to_string_t("CANCELED");
    if (m_value == eOrderStatus::OrderStatus_REJECTED) s = utility::conversions::to_string_t("REJECTED");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool OrderStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eOrderStatus v;

        
        if (s == utility::conversions::to_string_t("RECEIVED")) v = eOrderStatus::OrderStatus_RECEIVED;
        if (s == utility::conversions::to_string_t("ROUTING")) v = eOrderStatus::OrderStatus_ROUTING;
        if (s == utility::conversions::to_string_t("ROUTED")) v = eOrderStatus::OrderStatus_ROUTED;
        if (s == utility::conversions::to_string_t("NEW")) v = eOrderStatus::OrderStatus_NEW;
        if (s == utility::conversions::to_string_t("PENDING_CANCEL")) v = eOrderStatus::OrderStatus_PENDING_CANCEL;
        if (s == utility::conversions::to_string_t("PARTIALLY_FILLED")) v = eOrderStatus::OrderStatus_PARTIALLY_FILLED;
        if (s == utility::conversions::to_string_t("FILLED")) v = eOrderStatus::OrderStatus_FILLED;
        if (s == utility::conversions::to_string_t("CANCELED")) v = eOrderStatus::OrderStatus_CANCELED;
        if (s == utility::conversions::to_string_t("REJECTED")) v = eOrderStatus::OrderStatus_REJECTED;

        setValue(v);
    }
    return ok;
}

OrderStatus::eOrderStatus OrderStatus::getValue() const
{
   return m_value;
}

void OrderStatus::setValue(OrderStatus::eOrderStatus const value)
{
   m_value = value;
}


}
}
}
}


